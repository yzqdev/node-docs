"use strict";(self.webpackChunknode_docs=self.webpackChunknode_docs||[]).push([[3080],{1784:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t=JSON.parse('{"key":"v-2a1773a0","path":"/node-lessons/lesson7.html","title":"7.测试用例：mocha，should，istanbul","lang":"zh-CN","frontmatter":{"order":7,"description":"目标 建立一个 lesson7 项目，在其中编写代码。 main.js: 其中有个 fibonacci 函数。fibonacci 的介绍见： 。 此函数的定义为 int fibonacci(int n) 当 n === 0 时，返回 0；n === 1时，返回 1;; n > 1 时，返回 fibonacci(n) === fibonacci(n-1)...","head":[["meta",{"property":"og:url","content":"https://yzqdev.github.io/node-docs/node-docs/node-lessons/lesson7.html"}],["meta",{"property":"og:site_name","content":"node-docs"}],["meta",{"property":"og:title","content":"7.测试用例：mocha，should，istanbul"}],["meta",{"property":"og:description","content":"目标 建立一个 lesson7 项目，在其中编写代码。 main.js: 其中有个 fibonacci 函数。fibonacci 的介绍见： 。 此函数的定义为 int fibonacci(int n) 当 n === 0 时，返回 0；n === 1时，返回 1;; n > 1 时，返回 fibonacci(n) === fibonacci(n-1)..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-03-26T15:48:25.000Z"}],["meta",{"property":"article:modified_time","content":"2022-03-26T15:48:25.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"7.测试用例：mocha，should，istanbul\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2022-03-26T15:48:25.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"目标","slug":"目标","link":"#目标","children":[]},{"level":2,"title":"知识点","slug":"知识点","link":"#知识点","children":[]},{"level":2,"title":"课程内容","slug":"课程内容","link":"#课程内容","children":[]}],"git":{"createdTime":1648309705000,"updatedTime":1648309705000,"contributors":[{"name":"yzqdev","email":"yzqdev@outlook.com","commits":1}]},"readingTime":{"minutes":6.72,"words":2016},"filePathRelative":"node-lessons/lesson7.md","localizedDate":"2022年3月26日","autoDesc":true,"excerpt":""}')},9914:(n,s,a)=>{a.r(s),a.d(s,{default:()=>N});var t=a(6808);const p=(0,t._)("h1",{id:"_7-测试用例-mocha-should-istanbul",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#_7-测试用例-mocha-should-istanbul","aria-hidden":"true"},"#"),(0,t.Uk)(" 7.测试用例：mocha，should，istanbul")],-1),o=(0,t._)("h2",{id:"目标",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#目标","aria-hidden":"true"},"#"),(0,t.Uk)(" 目标")],-1),e=(0,t._)("p",null,"建立一个 lesson7 项目，在其中编写代码。",-1),c={href:"http://en.wikipedia.org/wiki/Fibonacci_number",target:"_blank",rel:"noopener noreferrer"},i=(0,t.uE)('<p>此函数的定义为 <code>int fibonacci(int n)</code></p><ul><li>当 n === 0 时，返回 0；n === 1时，返回 1;</li><li>n &gt; 1 时，返回 <code>fibonacci(n) === fibonacci(n-1) + fibonacci(n-2)</code>，如 <code>fibonacci(10) === 55</code>;</li><li>n 不可大于10，否则抛错，因为 Node.js 的计算性能没那么强。</li><li>n 也不可小于 0，否则抛错，因为没意义。</li><li>n 不为数字时，抛错。</li></ul><p>test/main.test.js: 对 main 函数进行测试，并使行覆盖率和分支覆盖率都达到 100%。</p><h2 id="知识点" tabindex="-1"><a class="header-anchor" href="#知识点" aria-hidden="true">#</a> 知识点</h2>',4),u={href:"http://mochajs.org/",target:"_blank",rel:"noopener noreferrer"},l={href:"https://github.com/tj/should.js",target:"_blank",rel:"noopener noreferrer"},k={href:"https://github.com/gotwarlost/istanbul",target:"_blank",rel:"noopener noreferrer"},r={href:"http://blog.csdn.net/haoel/article/details/2886",target:"_blank",rel:"noopener noreferrer"},d=(0,t.uE)('<h2 id="课程内容" tabindex="-1"><a class="header-anchor" href="#课程内容" aria-hidden="true">#</a> 课程内容</h2><p>首先，作为一个 Node.js 项目，先执行 <code>npm init</code> 创建 package.json。</p><p>其次，建立我们的 main.js 文件，编写 <code>fibonacci</code> 函数。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token function-variable function">fibonacci</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">if</span> <span class="token punctuation">(</span>require<span class="token punctuation">.</span>main <span class="token operator">===</span> module<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 如果是直接执行 main.js，则进入此处</span>\n  <span class="token comment">// 如果 main.js 被其他文件 require，则此处不会执行。</span>\n  <span class="token keyword">let</span> n <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;fibonacci(&#39;</span> <span class="token operator">+</span> n <span class="token operator">+</span> <span class="token string">&#39;) is&#39;</span><span class="token punctuation">,</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>OK，这只是个简单的实现。</p><p>我们可以执行试试</p><p><code>$ node main.js 10</code></p><p><img src="https://raw.githubusercontent.com/alsotang/node-lessons/master/lesson6/1.png" alt=""></p><p>嗯，结果是 55，符合预期。</p><p>接下来我们开始测试驱动开发，现在简单的实现已经完成，那我们就对它进行一下简单测试吧。</p><p>我们先得把 main.js 里面的 fibonacci 暴露出来，这个简单。加一句</p><p><code>exports.fibonacci = fibonacci;</code>（要是看不懂这句就去补补 Node.js 的基础知识吧）</p><p>就好了。</p><p>然后我们在 <code>test/main.test.js</code> 中引用我们的 main.js，并开始一个简单的测试。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// file: test/main.test.js</span>\n<span class="token keyword">let</span> main <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;../main&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> should <span class="token keyword">from</span> <span class="token string">&#39;should&#39;</span>\n\n<span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">&#39;test/main.test.js&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;should equal 55 when n === 10&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    main<span class="token punctuation">.</span><span class="token function">fibonacci</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span>should<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span><span class="token number">55</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>把测试先跑通，我们再讲这段测试代码的含义。</p><p>装个全局的 mocha: <code>$ npm install mocha -g</code>。</p><p><code>-g</code> 与 非<code>-g</code> 的区别，就是安装位置的区别，g 是 global 的意思。如果不加的话，则安装 mocha 在你的项目目录下面；如果加了，则这个 mocha 是安装在全局的，如果 mocha 有可执行命令的话，那么这个命令也会自动加入到你系统 $PATH 中的某个地方（在我的系统中，是这里 <code>/Users/alsotang/.nvm/v0.10.29/bin</code>）</p><p>在 lesson6 目录下，直接执行</p><p><code>$ mocha</code></p><p>输出应如下</p><p><img src="https://raw.githubusercontent.com/alsotang/node-lessons/master/lesson6/2.png" alt=""></p><p>那么，代码中的 describe 和 it 是什么意思呢？其实就是 BDD 中的那些意思，把它们当做语法来记就好了。</p><p>大家来看看 nodeclub 中，关于 topicController 的测试文件：</p>',24),m={href:"https://github.com/cnodejs/nodeclub/blob/master/test/controllers/topic.test.js",target:"_blank",rel:"noopener noreferrer"},v=(0,t._)("p",null,"这文件的内容没有超出之前课程的范围吧。",-1),b=(0,t._)("p",null,[(0,t._)("code",null,"describe"),(0,t.Uk)(" 中的字符串，用来描述你要测的主体是什么；"),(0,t._)("code",null,"it"),(0,t.Uk)(" 当中，描述具体的 case 内容。")],-1),h=(0,t._)("p",null,[(0,t.Uk)("而引入的那个 should 模块，是个断言库。玩过 ruby 的同学应该知道 "),(0,t._)("code",null,"rspec"),(0,t.Uk)("，rspec 它把测试框架和断言库的事情一起做了，而在 Node.js 中，这两样东西的作用分别是 mocha 和 should 在协作完成。")],-1),f=(0,t._)("p",null,[(0,t.Uk)("should 在 js 的 Object “基类”上注入了一个 "),(0,t._)("code",null,"#should"),(0,t.Uk)(" 属性，这个属性中，又有着许许多多的属性可以被访问。")],-1),g=(0,t._)("code",null,"(5).should.above(3)",-1),w=(0,t._)("code",null,"'foobar'.should.startWith('foo');",-1),y={href:"https://github.com/tj/should.js",target:"_blank",rel:"noopener noreferrer"},_={href:"https://github.com/LearnBoost/expect.js/",target:"_blank",rel:"noopener noreferrer"},j=(0,t.uE)('<p>回到正题，还记得我们 fibonacci 函数的几个要求吗？</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>* 当 n === 0 时，返回 0；n === 1时，返回 1;\n* n &gt; 1 时，返回 `fibonacci(n) === fibonacci(n-1) + fibonacci(n-2)`，如 `fibonacci(10) === 55`;\n* n 不可大于10，否则抛错，因为 Node.js 的计算性能没那么强。\n* n 也不可小于 0，否则抛错，因为没意义。\n* n 不为数字时，抛错。\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们用测试用例来描述一下这几个要求，更新后的 main.test.js 如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> main <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;../main&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> should <span class="token keyword">from</span> <span class="token string">&#39;should&#39;</span>\n\n<span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">&#39;test/main.test.js&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;should equal 0 when n === 0&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    main<span class="token punctuation">.</span><span class="token function">fibonacci</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>should<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;should equal 1 when n === 1&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    main<span class="token punctuation">.</span><span class="token function">fibonacci</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>should<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;should equal 55 when n === 10&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    main<span class="token punctuation">.</span><span class="token function">fibonacci</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span>should<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span><span class="token number">55</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;should throw when n &gt; 10&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      main<span class="token punctuation">.</span><span class="token function">fibonacci</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>should<span class="token punctuation">.</span><span class="token function">throw</span><span class="token punctuation">(</span><span class="token string">&#39;n should &lt;= 10&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;should throw when n &lt; 0&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      main<span class="token punctuation">.</span><span class="token function">fibonacci</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>should<span class="token punctuation">.</span><span class="token function">throw</span><span class="token punctuation">(</span><span class="token string">&#39;n should &gt;= 0&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;should throw when n isnt Number&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      main<span class="token punctuation">.</span><span class="token function">fibonacci</span><span class="token punctuation">(</span><span class="token string">&#39;呵呵&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>should<span class="token punctuation">.</span><span class="token function">throw</span><span class="token punctuation">(</span><span class="token string">&#39;n should be a Number&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还是比较清晰的吧？</p><p>我们这时候跑一下 <code>$ mocha</code>，会发现后三个 case 都没过。</p><p>于是我们更新 fibonacci 的实现：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token function-variable function">fibonacci</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> n <span class="token operator">!==</span> <span class="token string">&#39;number&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;n should be a Number&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;n should &gt;= 0&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;n should &lt;= 10&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再跑一次 <code>$ mocha</code>，就过了。这就是传说中的测试驱动开发：先把要达到的目的都描述清楚，然后让现有的程序跑不过 case，再修补程序，让 case 通过。</p><p>安装一个 istanbul : <code>$ npm i istanbul -g</code></p><p>执行 <code>$ istanbul cover _mocha</code></p><p>这会比直接使用 mocha 多一行覆盖率的输出，</p><p><img src="https://raw.githubusercontent.com/alsotang/node-lessons/master/lesson6/3.png" alt=""></p><p>可以看到，我们其中的分支覆盖率是 91.67%，行覆盖率是 87.5%。</p><p>打开 <code>open coverage/lcov-report/index.html</code> 看看</p><p><img src="https://raw.githubusercontent.com/alsotang/node-lessons/master/lesson6/4.png" alt=""></p><p>其实这覆盖率是 100% 的，24 25 两行没法测。</p><p>mocha 和 istanbul 的结合是相当无缝的，只要 mocha 跑得动，那么 istanbul 就接得进来。</p><p>到此这门课其实就完了，剩下要说的内容，都是些比较细节的。比较懒的同学可以踩坑了之后再回来看。</p><p>上面的课程，不完美的地方就在于 mocha 和 istanbul 版本依赖的问题，但为了不引入不必要的复杂性，所以上面就没提到这点了。</p><p>假设你有一个项目A，用到了 mocha 的 version 3，其他人有个项目B，用到了 mocha 的 version 10，那么如果你 <code>npm i mocha -g</code> 装的是 version 3 的话，你用 <code>$ mocha</code> 是不兼容B项目的。因为 mocha 版本改变之后，很可能语法也变了，对吧。</p><p>这时，跑测试用例的正确方法，应该是</p><ol><li><code>$ npm i mocha --save-dev</code>，装个 mocha 到项目目录中去</li><li><code>$ ./node_modules/.bin/mocha</code>，用刚才安装的这个特定版本的 mocha，来跑项目的测试代码。</li></ol><p><code>./node_modules/.bin</code> 这个目录下放着我们所有依赖自带的那些可执行文件。</p><p>每次输入这个很麻烦对吧？所以我们要引入 Makefile，让 Makefile 帮我们记住复杂的配置。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>test:\n  ./node_modules/.bin/mocha\n\ncov test-cov:\n  ./node_modules/.bin/istanbul cover _mocha\n\n.PHONY: test cov test-cov\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这时，我们只需要调用 <code>make test</code> 或者 <code>make cov</code>，就可以跑我们相应的测试了。</p>',27),x={href:"http://blog.csdn.net/haoel/article/details/2886",target:"_blank",rel:"noopener noreferrer"},U=(0,t.uE)('<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//app.test.js</span>\n<span class="token keyword">import</span> app <span class="token keyword">from</span> <span class="token string">&#39;../app&#39;</span> <span class="token punctuation">;</span>\n<span class="token keyword">import</span> supertest <span class="token keyword">from</span><span class="token string">&#39;supertest&#39;</span>\n<span class="token keyword">let</span> request <span class="token operator">=</span> <span class="token function">supertest</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> should <span class="token keyword">from</span> <span class="token string">&#39;should&#39;</span>\n\n<span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">&#39;test/app.test.js&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;should return 55 when n is 10&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">done</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    request<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/fib&#39;</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">n</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        res<span class="token punctuation">.</span>text<span class="token punctuation">.</span>should<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span><span class="token string">&#39;55&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">done</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">var</span> <span class="token function-variable function">testFib</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">n<span class="token punctuation">,</span> expect<span class="token punctuation">,</span> done</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    request<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/fib&#39;</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">n</span><span class="token operator">:</span> n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        res<span class="token punctuation">.</span>text<span class="token punctuation">.</span>should<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>expect<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">done</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;should return 0 when n === 0&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">done</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">testFib</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&#39;0&#39;</span><span class="token punctuation">,</span> done<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;should equal 1 when n === 1&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">done</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">testFib</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span> done<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;should equal 55 when n === 10&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">done</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">testFib</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">&#39;55&#39;</span><span class="token punctuation">,</span> done<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;should throw when n &gt; 10&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">done</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">testFib</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token string">&#39;n should &lt;= 10&#39;</span><span class="token punctuation">,</span> done<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;should throw when n &lt; 0&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">done</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">testFib</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;n should &gt;= 0&#39;</span><span class="token punctuation">,</span> done<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;should throw when n isnt Number&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">done</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">testFib</span><span class="token punctuation">(</span><span class="token string">&#39;good&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;n should be a Number&#39;</span><span class="token punctuation">,</span> done<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;should status 500 when error&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">done</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    request<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/fib&#39;</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">n</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        res<span class="token punctuation">.</span>status<span class="token punctuation">.</span>should<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">done</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',1),q={},N=(0,a(8580).Z)(q,[["render",function(n,s){const a=(0,t.up)("ExternalLinkIcon");return(0,t.wg)(),(0,t.iD)("div",null,[p,o,e,(0,t._)("p",null,[(0,t.Uk)("main.js: 其中有个 fibonacci 函数。fibonacci 的介绍见："),(0,t._)("a",c,[(0,t.Uk)("http://en.wikipedia.org/wiki/Fibonacci_number"),(0,t.Wm)(a)]),(0,t.Uk)(" 。")]),i,(0,t._)("ol",null,[(0,t._)("li",null,[(0,t.Uk)("学习使用测试框架 mocha : "),(0,t._)("a",u,[(0,t.Uk)("http://mochajs.org/"),(0,t.Wm)(a)])]),(0,t._)("li",null,[(0,t.Uk)("学习使用断言库 should : "),(0,t._)("a",l,[(0,t.Uk)("https://github.com/tj/should.js"),(0,t.Wm)(a)])]),(0,t._)("li",null,[(0,t.Uk)("学习使用测试率覆盖工具 istanbul : "),(0,t._)("a",k,[(0,t.Uk)("https://github.com/gotwarlost/istanbul"),(0,t.Wm)(a)])]),(0,t._)("li",null,[(0,t.Uk)("简单 Makefile 的编写 : "),(0,t._)("a",r,[(0,t.Uk)("http://blog.csdn.net/haoel/article/details/2886"),(0,t.Wm)(a)])])]),d,(0,t._)("p",null,[(0,t._)("a",m,[(0,t.Uk)("https://github.com/cnodejs/nodeclub/blob/master/test/controllers/topic.test.js"),(0,t.Wm)(a)])]),v,b,h,f,(0,t._)("p",null,[(0,t.Uk)("比如测试一个数是不是大于3，则是 "),g,(0,t.Uk)("；测试一个字符串是否有着特定前缀："),w,(0,t.Uk)("。should.js API 在："),(0,t._)("a",y,[(0,t.Uk)("https://github.com/tj/should.js"),(0,t.Wm)(a)])]),(0,t._)("p",null,[(0,t.Uk)("should.js 如果现在还是 version 3 的话，我倒是推荐大家去看看它的 API 和 源码；现在 should 是 version 4 了，API 丑得很，但为了不掉队，我还是一直用着它。我觉得 expect 麻烦，所以不用 expect，对了，expect 也是一个断言库："),(0,t._)("a",_,[(0,t.Uk)("https://github.com/LearnBoost/expect.js/"),(0,t.Wm)(a)]),(0,t.Uk)(" 。")]),j,(0,t._)("p",null,[(0,t.Uk)("至于 Makefile 怎么写？以及 .PHONY 是什么意思，请看这里："),(0,t._)("a",x,[(0,t.Uk)("http://blog.csdn.net/haoel/article/details/2886"),(0,t.Wm)(a)]),(0,t.Uk)(" ，左耳朵耗子陈皓2004年的文章。")]),U])}]])},8580:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,t]of s)a[n]=t;return a}}}]);