"use strict";(self.webpackChunknode_docs=self.webpackChunknode_docs||[]).push([[4726],{7410:(e,s,a)=>{a.r(s),a.d(s,{data:()=>o});const o=JSON.parse('{"key":"v-69b196a7","path":"/apis/process.html","title":"process 对象","lang":"zh-CN","frontmatter":{"description":"process对象是 Node 原生提供的对象，表示当前运行的 Node 进程。它不用引入模块，可以直接使用。 process.argv process.argv是一个数组，表示启动脚本时的命令行参数。 它的前两项是固定的。 第一项是 Node 可执行文件的路径; 第二项是 JavaScript 脚本的路径; 后面的数组成员都是命令行参数。 上面这个命...","head":[["meta",{"property":"og:url","content":"https://yzqdev.github.io/node-docs/node-docs/apis/process.html"}],["meta",{"property":"og:site_name","content":"node-docs"}],["meta",{"property":"og:title","content":"process 对象"}],["meta",{"property":"og:description","content":"process对象是 Node 原生提供的对象，表示当前运行的 Node 进程。它不用引入模块，可以直接使用。 process.argv process.argv是一个数组，表示启动脚本时的命令行参数。 它的前两项是固定的。 第一项是 Node 可执行文件的路径; 第二项是 JavaScript 脚本的路径; 后面的数组成员都是命令行参数。 上面这个命..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-07-31T12:50:49.000Z"}],["meta",{"property":"article:modified_time","content":"2022-07-31T12:50:49.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"process 对象\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2022-07-31T12:50:49.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"process.argv","slug":"process-argv","link":"#process-argv","children":[]},{"level":2,"title":"process.cwd()","slug":"process-cwd","link":"#process-cwd","children":[]},{"level":2,"title":"process.memoryUsage()","slug":"process-memoryusage","link":"#process-memoryusage","children":[]},{"level":2,"title":"process.cpuUsage()","slug":"process-cpuusage","link":"#process-cpuusage","children":[]},{"level":2,"title":"process.versions,process.arch,process.env,process.platform","slug":"process-versions-process-arch-process-env-process-platform","link":"#process-versions-process-arch-process-env-process-platform","children":[]},{"level":2,"title":"process.execPath","slug":"process-execpath","link":"#process-execpath","children":[]},{"level":2,"title":"process.uptime(),process.pid","slug":"process-uptime-process-pid","link":"#process-uptime-process-pid","children":[]}],"git":{"createdTime":1659265828000,"updatedTime":1659271849000,"contributors":[{"name":"yzqdev","email":"yzqdev@outlook.com","commits":2}]},"readingTime":{"minutes":0.87,"words":262},"filePathRelative":"apis/process.md","localizedDate":"2022年7月31日","autoDesc":true,"excerpt":""}')},7262:(e,s,a)=>{a.r(s),a.d(s,{default:()=>p});var o=a(6808);const r=[(0,o.uE)('<h1 id="process-对象" tabindex="-1"><a class="header-anchor" href="#process-对象" aria-hidden="true">#</a> process 对象</h1><p><code>process</code>对象是 Node 原生提供的对象，表示当前运行的 Node 进程。它不用引入模块，可以直接使用。</p><h2 id="process-argv" tabindex="-1"><a class="header-anchor" href="#process-argv" aria-hidden="true">#</a> process.argv</h2><p><code>process.argv</code>是一个数组，表示启动脚本时的命令行参数。</p><p>它的前两项是固定的。</p><ul><li>第一项是 Node 可执行文件的路径</li><li>第二项是 JavaScript 脚本的路径</li></ul><p>后面的数组成员都是命令行参数。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">node</span> index.js <span class="token parameter variable">--watch</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面这个命令执行后，在<code>index.js</code>脚本里面，<code>process.argv</code>数组共有三项。</p><ul><li><code>process.argv[0]</code>：/path/to/node</li><li><code>process.argv[1]</code>：/path/to/index.js</li><li><code>process.argv[2]</code>：--watch</li></ul><p>如果只需要命令行参数，可以用解构赋值获取。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">[</span> <span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token operator">...</span>args <span class="token punctuation">]</span> <span class="token operator">=</span> process<span class="token punctuation">.</span>argv<span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// &quot;--watch&quot;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码，<code>args</code>数组就是通过解构赋值，拿到的所有命令行参数。</p><h2 id="process-cwd" tabindex="-1"><a class="header-anchor" href="#process-cwd" aria-hidden="true">#</a> process.cwd()</h2><p>当前js文件执行路径,跟系统pwd一样</p><h2 id="process-memoryusage" tabindex="-1"><a class="header-anchor" href="#process-memoryusage" aria-hidden="true">#</a> process.memoryUsage()</h2><p>获取当前进程所使用的的内存</p><h2 id="process-cpuusage" tabindex="-1"><a class="header-anchor" href="#process-cpuusage" aria-hidden="true">#</a> process.cpuUsage()</h2><p>获取cpu占用</p><h2 id="process-versions-process-arch-process-env-process-platform" tabindex="-1"><a class="header-anchor" href="#process-versions-process-arch-process-env-process-platform" aria-hidden="true">#</a> process.versions,process.arch,process.env,process.platform</h2><p>获取系统相关信息</p><h2 id="process-execpath" tabindex="-1"><a class="header-anchor" href="#process-execpath" aria-hidden="true">#</a> process.execPath</h2><p>获取执行目录</p><h2 id="process-uptime-process-pid" tabindex="-1"><a class="header-anchor" href="#process-uptime-process-pid" aria-hidden="true">#</a> process.uptime(),process.pid</h2><p>获取运行时间,当前pid</p>',25)],c={},p=(0,a(8580).Z)(c,[["render",function(e,s){return(0,o.wg)(),(0,o.iD)("div",null,r)}]])},8580:(e,s)=>{s.Z=(e,s)=>{const a=e.__vccOpts||e;for(const[e,o]of s)a[e]=o;return a}}}]);