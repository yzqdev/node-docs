"use strict";(self.webpackChunknode_docs=self.webpackChunknode_docs||[]).push([[8916],{7214:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t=JSON.parse('{"key":"v-28629b01","path":"/node-lessons/lesson6.html","title":"6.使用 async 控制并发","lang":"zh-CN","frontmatter":{"order":6,"description":"目标 建立一个 lesson6项目，在其中编写代码。 代码的入口是 app.js，当调用 node app.js 时，它会输出 CNode( ) 社区首页的所有主题的标题，链接和第一条评论，以 json 的格式。 注意：与上节课不同，并发连接数需要控制在 5 个。 输出示例： 知识点 1. 学习 async( ) 的使用。这里有个详细的 async d...","head":[["meta",{"property":"og:url","content":"https://yzqdev.github.io/node-docs/node-docs/node-lessons/lesson6.html"}],["meta",{"property":"og:site_name","content":"node-docs"}],["meta",{"property":"og:title","content":"6.使用 async 控制并发"}],["meta",{"property":"og:description","content":"目标 建立一个 lesson6项目，在其中编写代码。 代码的入口是 app.js，当调用 node app.js 时，它会输出 CNode( ) 社区首页的所有主题的标题，链接和第一条评论，以 json 的格式。 注意：与上节课不同，并发连接数需要控制在 5 个。 输出示例： 知识点 1. 学习 async( ) 的使用。这里有个详细的 async d..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-03-26T15:48:25.000Z"}],["meta",{"property":"article:modified_time","content":"2022-03-26T15:48:25.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"6.使用 async 控制并发\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2022-03-26T15:48:25.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"目标","slug":"目标","link":"#目标","children":[]},{"level":2,"title":"知识点","slug":"知识点","link":"#知识点","children":[]},{"level":2,"title":"课程内容","slug":"课程内容","link":"#课程内容","children":[]}],"git":{"createdTime":1648309705000,"updatedTime":1648309705000,"contributors":[{"name":"yzqdev","email":"yzqdev@outlook.com","commits":1}]},"readingTime":{"minutes":3.3,"words":989},"filePathRelative":"node-lessons/lesson6.md","localizedDate":"2022年3月26日","autoDesc":true,"excerpt":""}')},9611:(n,s,a)=>{a.r(s),a.d(s,{default:()=>j});var t=a(6808);const p=(0,t._)("h1",{id:"_6-使用-async-控制并发",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#_6-使用-async-控制并发","aria-hidden":"true"},"#"),(0,t.Uk)(" 6.使用 async 控制并发")],-1),e=(0,t._)("h2",{id:"目标",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#目标","aria-hidden":"true"},"#"),(0,t.Uk)(" 目标")],-1),o=(0,t._)("p",null,"建立一个 lesson6项目，在其中编写代码。",-1),c=(0,t._)("code",null,"app.js",-1),l=(0,t._)("code",null,"node app.js",-1),u={href:"https://cnodejs.org/",target:"_blank",rel:"noopener noreferrer"},i=(0,t.uE)('<p>注意：与上节课不同，并发连接数需要控制在 5 个。</p><p>输出示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">[</span>\n  <span class="token punctuation">{</span>\n    <span class="token string-property property">&quot;title&quot;</span><span class="token operator">:</span> <span class="token string">&quot;【公告】发招聘帖的同学留意一下这里&quot;</span><span class="token punctuation">,</span>\n    <span class="token string-property property">&quot;href&quot;</span><span class="token operator">:</span> <span class="token string">&quot;http://cnodejs.org/topic/541ed2d05e28155f24676a12&quot;</span><span class="token punctuation">,</span>\n    <span class="token string-property property">&quot;comment1&quot;</span><span class="token operator">:</span> <span class="token string">&quot;呵呵呵呵&quot;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    <span class="token string-property property">&quot;title&quot;</span><span class="token operator">:</span> <span class="token string">&quot;发布一款 Sublime Text 下的 JavaScript 语法高亮插件&quot;</span><span class="token punctuation">,</span>\n    <span class="token string-property property">&quot;href&quot;</span><span class="token operator">:</span> <span class="token string">&quot;http://cnodejs.org/topic/54207e2efffeb6de3d61f68f&quot;</span><span class="token punctuation">,</span>\n    <span class="token string-property property">&quot;comment1&quot;</span><span class="token operator">:</span> <span class="token string">&quot;沙发！&quot;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="知识点" tabindex="-1"><a class="header-anchor" href="#知识点" aria-hidden="true">#</a> 知识点</h2>',4),r={href:"https://github.com/caolan/async",target:"_blank",rel:"noopener noreferrer"},k={href:"https://github.com/alsotang/async_demo",target:"_blank",rel:"noopener noreferrer"},d=(0,t._)("li",null,"学习使用 async 来控制并发连接数。",-1),v=(0,t._)("h2",{id:"课程内容",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#课程内容","aria-hidden":"true"},"#"),(0,t.Uk)(" 课程内容")],-1),m=(0,t._)("p",null,"lesson4 的代码其实是不完美的。为什么这么说，是因为在 lesson4 中，我们一次性发了 40 个并发请求出去，要知道，除去 CNode 的话，别的网站有可能会因为你发出的并发连接数太多而当你是在恶意请求，把你的 IP 封掉。",-1),b=(0,t._)("p",null,"我们在写爬虫的时候，如果有 1000 个链接要去爬，那么不可能同时发出 1000 个并发链接出去对不对？我们需要控制一下并发的数量，比如并发 10 个就好，然后慢慢抓完这 1000 个链接。",-1),g=(0,t._)("p",null,"用 async 来做这件事很简单。",-1),y=(0,t._)("code",null,"mapLimit(arr, limit, iterator, callback)",-1),h=(0,t._)("code",null,"queue(worker, concurrency)",-1),f={href:"https://github.com/caolan/async#queueworker-concurrency",target:"_blank",rel:"noopener noreferrer"},w=(0,t.uE)('<p>这回我就不带大家爬网站了，我们来专注知识点：并发连接数控制。</p><p>对了，还有个问题是，什么时候用 eventproxy，什么时候使用 async 呢？它们不都是用来做异步流程控制的吗？</p><p>我的答案是：</p><p>当你需要去多个源(一般是小于 10 个)汇总数据的时候，用 eventproxy 方便；当你需要用到队列，需要控制并发数，或者你喜欢函数式编程思维时，使用 async。大部分场景是前者，所以我个人大部分时间是用 eventproxy 的。</p><p>正题开始。</p><p>首先，我们伪造一个 <code>fetchUrl(url, callback)</code> 函数，这个函数的作用就是，当你通过</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">fetchUrl</span><span class="token punctuation">(</span><span class="token string">&#39;http://www.baidu.com&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> content</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// do something with `content`</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>调用它时，它会返回 <code>http://www.baidu.com</code> 的页面内容回来。</p><p>当然，我们这里的返回内容是假的，返回延时是随机的。并且在它被调用时，会告诉你它现在一共被多少个地方并发调用着。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 并发连接数的计数器</span>\n<span class="token keyword">let</span> concurrencyCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> <span class="token function-variable function">fetchUrl</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// delay 的值在 2000 以内，是个随机的整数</span>\n  <span class="token keyword">let</span> delay <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10000000</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2000</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  concurrencyCount<span class="token operator">++</span><span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;现在的并发数是&#39;</span><span class="token punctuation">,</span> concurrencyCount<span class="token punctuation">,</span> <span class="token string">&#39;，正在抓取的是&#39;</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token string">&#39;，耗时&#39;</span> <span class="token operator">+</span> delay <span class="token operator">+</span> <span class="token string">&#39;毫秒&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    concurrencyCount<span class="token operator">--</span><span class="token punctuation">;</span>\n    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> url <span class="token operator">+</span> <span class="token string">&#39; html content&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们接着来伪造一组链接</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">30</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  urls<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;http://datasource_&#39;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这组链接的长这样：</p><p><img src="https://raw.githubusercontent.com/alsotang/node-lessons/master/lesson5/1.png" alt=""></p><p>接着，我们使用 <code>async.mapLimit</code> 来并发抓取，并获取结果。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>async<span class="token punctuation">.</span><span class="token function">mapLimit</span><span class="token punctuation">(</span>urls<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">fetchUrl</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> result</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;final:&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行输出是这样的：</p><p><img src="https://raw.githubusercontent.com/alsotang/node-lessons/master/lesson5/2.png" alt=""></p><p>可以看到，一开始，并发链接数是从 1 开始增长的，增长到 5 时，就不再增加。当其中有任务完成时，再继续抓取。并发连接数始终控制在 5 个。</p><p>完整代码请参见 app.js 文件。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> async <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;async&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">let</span> concurrencyCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> <span class="token function-variable function">fetchUrl</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> delay <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10000000</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2000</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  concurrencyCount<span class="token operator">++</span><span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;现在的并发数是&#39;</span><span class="token punctuation">,</span> concurrencyCount<span class="token punctuation">,</span> <span class="token string">&#39;，正在抓取的是&#39;</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token string">&#39;，耗时&#39;</span> <span class="token operator">+</span> delay <span class="token operator">+</span> <span class="token string">&#39;毫秒&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    concurrencyCount<span class="token operator">--</span><span class="token punctuation">;</span>\n    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> url <span class="token operator">+</span> <span class="token string">&#39; html content&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">let</span> urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">30</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  urls<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;http://datasource_&#39;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\nasync<span class="token punctuation">.</span><span class="token function">mapLimit</span><span class="token punctuation">(</span>urls<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">fetchUrl</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> result</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;final:&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',21),_={},j=(0,a(8580).Z)(_,[["render",function(n,s){const a=(0,t.up)("ExternalLinkIcon");return(0,t.wg)(),(0,t.iD)("div",null,[p,e,o,(0,t._)("p",null,[(0,t.Uk)("代码的入口是 "),c,(0,t.Uk)("，当调用 "),l,(0,t.Uk)(" 时，它会输出 CNode("),(0,t._)("a",u,[(0,t.Uk)("https://cnodejs.org/"),(0,t.Wm)(a)]),(0,t.Uk)(" ) 社区首页的所有主题的标题，链接和第一条评论，以 json 的格式。")]),i,(0,t._)("ol",null,[(0,t._)("li",null,[(0,t.Uk)("学习 async("),(0,t._)("a",r,[(0,t.Uk)("https://github.com/caolan/async"),(0,t.Wm)(a)]),(0,t.Uk)(" ) 的使用。这里有个详细的 async demo 演示："),(0,t._)("a",k,[(0,t.Uk)("https://github.com/alsotang/async_demo"),(0,t.Wm)(a)])]),d]),v,m,b,g,(0,t._)("p",null,[(0,t.Uk)("这次我们要介绍的是 async 的 "),y,(0,t.Uk)(" 接口。另外，还有个常用的控制并发连接数的接口是 "),h,(0,t.Uk)("，大家可以去 "),(0,t._)("a",f,[(0,t.Uk)("https://github.com/caolan/async#queueworker-concurrency"),(0,t.Wm)(a)]),(0,t.Uk)(" 看看说明。")]),w])}]])},8580:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,t]of s)a[n]=t;return a}}}]);