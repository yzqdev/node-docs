"use strict";(self.webpackChunknode_docs=self.webpackChunknode_docs||[]).push([[691],{149:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t=JSON.parse('{"key":"v-1c84cbd2","path":"/apis/path.html","title":"path","lang":"zh-CN","frontmatter":{"description":"path模块提供和系统路径相关的api path.sep在windows上是\\\\,在linux上是/ path.delimiter在windows上是;在linux上是/ path.basename() 获取基础路径 path.dirname() 获取路径名称 path.extname() 获取后缀 path.format() path.parse的反面...","head":[["meta",{"property":"og:url","content":"https://yzqdev.github.io/node-docs/node-docs/apis/path.html"}],["meta",{"property":"og:site_name","content":"node-docs"}],["meta",{"property":"og:title","content":"path"}],["meta",{"property":"og:description","content":"path模块提供和系统路径相关的api path.sep在windows上是\\\\,在linux上是/ path.delimiter在windows上是;在linux上是/ path.basename() 获取基础路径 path.dirname() 获取路径名称 path.extname() 获取后缀 path.format() path.parse的反面..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-07-31T12:50:49.000Z"}],["meta",{"property":"article:modified_time","content":"2022-07-31T12:50:49.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"path\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2022-07-31T12:50:49.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"path.basename()","slug":"path-basename","link":"#path-basename","children":[]},{"level":2,"title":"path.dirname()","slug":"path-dirname","link":"#path-dirname","children":[]},{"level":2,"title":"path.extname()","slug":"path-extname","link":"#path-extname","children":[]},{"level":2,"title":"path.format()","slug":"path-format","link":"#path-format","children":[]},{"level":2,"title":"path.isAbsolute()","slug":"path-isabsolute","link":"#path-isabsolute","children":[]},{"level":2,"title":"path.join","slug":"path-join","link":"#path-join","children":[]},{"level":2,"title":"path.resolve()","slug":"path-resolve","link":"#path-resolve","children":[]},{"level":2,"title":"path.normalize()","slug":"path-normalize","link":"#path-normalize","children":[]},{"level":2,"title":"path.parse()","slug":"path-parse","link":"#path-parse","children":[]},{"level":2,"title":"path.relative()","slug":"path-relative","link":"#path-relative","children":[]}],"git":{"createdTime":1659265828000,"updatedTime":1659271849000,"contributors":[{"name":"yzqdev","email":"yzqdev@outlook.com","commits":2}]},"readingTime":{"minutes":2.06,"words":618},"filePathRelative":"apis/path.md","localizedDate":"2022年7月31日","autoDesc":true,"excerpt":""}')},499:(n,s,a)=>{a.r(s),a.d(s,{default:()=>r});var t=a(6808);const e=(0,t.uE)('<h1 id="path" tabindex="-1"><a class="header-anchor" href="#path" aria-hidden="true">#</a> path</h1><p>path模块提供和系统路径相关的api</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p><code>path.sep</code>在windows上是<code>\\</code>,在linux上是<code>/</code><code>path.delimiter</code>在windows上是<code>;</code>在linux上是<code>/</code></p></div><h2 id="path-basename" tabindex="-1"><a class="header-anchor" href="#path-basename" aria-hidden="true">#</a> path.basename()</h2><p>获取基础路径</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>basename <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;path&#39;</span>\n<span class="token function">basename</span><span class="token punctuation">(</span><span class="token string">&#39;/test/something&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// something</span>\n<span class="token function">basename</span><span class="token punctuation">(</span><span class="token string">&#39;/test/something.txt&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// something.txt</span>\n<span class="token function">basename</span><span class="token punctuation">(</span><span class="token string">&#39;/test/something.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;.txt&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// something</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="path-dirname" tabindex="-1"><a class="header-anchor" href="#path-dirname" aria-hidden="true">#</a> path.dirname()</h2><p>获取路径名称</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token function">dirname</span><span class="token punctuation">(</span><span class="token string">&#39;/test/something&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// /test</span>\n<span class="token function">dirname</span><span class="token punctuation">(</span><span class="token string">&#39;/test/something/file.txt&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// /test/something</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="path-extname" tabindex="-1"><a class="header-anchor" href="#path-extname" aria-hidden="true">#</a> path.extname()</h2><p>获取后缀</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token function">extname</span><span class="token punctuation">(</span><span class="token string">&#39;/test/something&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;&#39;</span>\n<span class="token function">extname</span><span class="token punctuation">(</span><span class="token string">&#39;/test/something/file.txt&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;.txt&#39;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="path-format" tabindex="-1"><a class="header-anchor" href="#path-format" aria-hidden="true">#</a> path.format()</h2><p><code>path.parse</code>的反面</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// POSIX</span>\n<span class="token function">format</span><span class="token punctuation">(</span><span class="token punctuation">{</span> dir<span class="token operator">:</span> <span class="token string">&#39;/Users/joe&#39;</span><span class="token punctuation">,</span> base<span class="token operator">:</span> <span class="token string">&#39;test.txt&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//  &#39;/Users/joe/test.txt&#39;</span>\n<span class="token function">format</span><span class="token punctuation">(</span><span class="token punctuation">{</span> root<span class="token operator">:</span> <span class="token string">&#39;/Users/joe&#39;</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">&#39;test&#39;</span><span class="token punctuation">,</span> ext<span class="token operator">:</span> <span class="token string">&#39;.txt&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//  &#39;/Users/joe/test.txt&#39;</span>\n<span class="token comment">//windows</span>\n<span class="token function">format</span><span class="token punctuation">(</span><span class="token punctuation">{</span> dir<span class="token operator">:</span> <span class="token string">&#39;C:\\\\Users\\\\joe&#39;</span><span class="token punctuation">,</span> base<span class="token operator">:</span> <span class="token string">&#39;test.txt&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//  &#39;C:\\\\Users\\\\joe\\\\test.txt&#39;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="path-isabsolute" tabindex="-1"><a class="header-anchor" href="#path-isabsolute" aria-hidden="true">#</a> path.isAbsolute()</h2><p>是否是绝对路径</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token function">isAbsolute</span><span class="token punctuation">(</span><span class="token string">&#39;/test/something&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n<span class="token function">isAbsolute</span><span class="token punctuation">(</span><span class="token string">&#39;./test/something&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="path-join" tabindex="-1"><a class="header-anchor" href="#path-join" aria-hidden="true">#</a> path.join</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">&#39;joe&#39;</span><span class="token punctuation">;</span>\n <span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;users&#39;</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token string">&#39;notes.txt&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;/users/joe/notes.txt&#39;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>使用平台特定的分隔符（window：/）作为定界符,将所有给定的path片段连接在一起,然后规范化生成的路径</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">)</span>   <span class="token comment">// 输出结果为： &#39;/a/b/c&#39;</span>\npath<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;/b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">)</span>  <span class="token comment">// 输出结果为： &#39;/a/b/c&#39;</span>\npath<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;a/b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;../&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 输出结果为： &#39;/a/c&#39;</span>\npath<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;./&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 输出结果为：&#39;/a/c&#39;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="path-resolve" tabindex="-1"><a class="header-anchor" href="#path-resolve" aria-hidden="true">#</a> path.resolve()</h2><p>将路径或者路径片段序列化为绝对路径</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 假设当前绝对路径为/admin/user</span>\npath<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 输出结果为：&#39;/admin/user/a/a/c&#39;</span>\npath<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;/b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 输出结果为： &#39;/b/c&#39;</span>\npath<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;a/b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;../&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 输出结果为：&#39;/admin/user/a/c&#39;</span>\npath<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;./&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 输出结果为：&#39;admin/user/a/c&#39;</span>\n<span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;joe.txt&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;/Users/joe/joe.txt&#39; if run from my home folder</span>\n<span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;tmp&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;joe.txt&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;/Users/joe/tmp/joe.txt&#39; if run from my home folder</span>\n<span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;/etc&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;joe.txt&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;/etc/joe.txt&#39;</span>\n注意<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/</span><span class="token template-punctuation string">`</span></span>的存在<span class="token punctuation">,</span> <span class="token string">&#39;/a&#39;</span>代表的是根目录下的a<span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span>代表的是当前目录下的a\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',25),p=(0,t._)("code",null,"/",-1),o=(0,t._)("code",null,"PATH",-1),c=(0,t._)("code",null,"path.sep",-1),i={href:"https://nodejs.org/dist/latest-v12.x/docs/api/path.html#path_path_sep",target:"_blank",rel:"noopener noreferrer"},l=(0,t.uE)('<p>在 Unix 系统下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>foo<span class="token operator">/</span>bar<span class="token operator">/</span>baz&#39;<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span>sep<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// Returns: [&#39;foo&#39;, &#39;bar&#39;, &#39;baz&#39;]</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Windows 系统下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>foo\\\\bar\\\\baz&#39;<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span>sep<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// Returns: [&#39;foo&#39;, &#39;bar&#39;, &#39;baz&#39;]</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>path.sep</code> 的赋值也是根据操作系统来决定是 <code>/</code> 还是 `\\</p><p>最终的方案自然是 <code>string.split(path.sep).join(&#39;/&#39;)</code> 来进行分隔符的替换。</p><h2 id="path-normalize" tabindex="-1"><a class="header-anchor" href="#path-normalize" aria-hidden="true">#</a> path.normalize()</h2><p>计算最合适的路径</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token function">normalize</span><span class="token punctuation">(</span><span class="token string">&#39;/users/joe/..//test.txt&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;/users/test.txt&#39;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="path-parse" tabindex="-1"><a class="header-anchor" href="#path-parse" aria-hidden="true">#</a> path.parse()</h2><p>解析路径</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">&#39;/users/test.txt&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">//结果</span>\n<span class="token punctuation">{</span>\n  root<span class="token operator">:</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span>\n  dir<span class="token operator">:</span> <span class="token string">&#39;/users&#39;</span><span class="token punctuation">,</span>\n  base<span class="token operator">:</span> <span class="token string">&#39;test.txt&#39;</span><span class="token punctuation">,</span>\n  ext<span class="token operator">:</span> <span class="token string">&#39;.txt&#39;</span><span class="token punctuation">,</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;test&#39;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="path-relative" tabindex="-1"><a class="header-anchor" href="#path-relative" aria-hidden="true">#</a> path.relative()</h2><p>获取相对路径</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token function">relative</span><span class="token punctuation">(</span><span class="token string">&#39;/Users/joe&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;/Users/joe/test.txt&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;test.txt&#39;</span>\n<span class="token function">relative</span><span class="token punctuation">(</span><span class="token string">&#39;/Users/joe&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;/Users/joe/something/test.txt&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;something/test.txt&#39;</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',15),u={},r=(0,a(8580).Z)(u,[["render",function(n,s){const a=(0,t.up)("ExternalLinkIcon");return(0,t.wg)(),(0,t.iD)("div",null,[e,(0,t._)("p",null,[(0,t.Uk)("为了要获取到符合 "),p,(0,t.Uk)(" 格式的路径，我们可以使用 "),o,(0,t.Uk)(" 模块提供的 "),c,(0,t.Uk)(),(0,t._)("a",i,[(0,t.Uk)("接口"),(0,t.Wm)(a)]),(0,t.Uk)("进行字符串匹配截取，接口会根据系统环境的不同进行匹配截取。")]),l])}]])},8580:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,t]of s)a[n]=t;return a}}}]);