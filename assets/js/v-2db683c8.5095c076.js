"use strict";(self.webpackChunknode_docs=self.webpackChunknode_docs||[]).push([[2707],{337:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e=JSON.parse('{"key":"v-2db683c8","path":"/apis/buffer.html","title":"Buffer","lang":"zh-CN","frontmatter":{"description":"JavaScript 语言自身只有字符串数据类型，没有二进制数据类型。 但在处理像TCP流或文件流时，必须使用到二进制数据。因此在 Node.js中，定义了一个 Buffer 类，该类用来创建一个专门存放二进制数据的缓存区。 创建buffer Node.js 目前支持的字符编码包括： ascii - 仅支持 7 位 ASCII 数据。如果设置去掉高位的...","head":[["meta",{"property":"og:url","content":"https://yzqdev.github.io/node-docs/node-docs/apis/buffer.html"}],["meta",{"property":"og:site_name","content":"node-docs"}],["meta",{"property":"og:title","content":"Buffer"}],["meta",{"property":"og:description","content":"JavaScript 语言自身只有字符串数据类型，没有二进制数据类型。 但在处理像TCP流或文件流时，必须使用到二进制数据。因此在 Node.js中，定义了一个 Buffer 类，该类用来创建一个专门存放二进制数据的缓存区。 创建buffer Node.js 目前支持的字符编码包括： ascii - 仅支持 7 位 ASCII 数据。如果设置去掉高位的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-08-01T04:27:43.000Z"}],["meta",{"property":"article:modified_time","content":"2022-08-01T04:27:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Buffer\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2022-08-01T04:27:43.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"创建buffer","slug":"创建buffer","link":"#创建buffer","children":[]},{"level":2,"title":"创建 Buffer 类","slug":"创建-buffer-类","link":"#创建-buffer-类","children":[]},{"level":2,"title":"写入缓冲区","slug":"写入缓冲区","link":"#写入缓冲区","children":[]},{"level":2,"title":"从缓冲区读取数据","slug":"从缓冲区读取数据","link":"#从缓冲区读取数据","children":[]},{"level":2,"title":"将 Buffer 转换为 JSON 对象","slug":"将-buffer-转换为-json-对象","link":"#将-buffer-转换为-json-对象","children":[]},{"level":2,"title":"缓冲区合并","slug":"缓冲区合并","link":"#缓冲区合并","children":[]},{"level":2,"title":"缓冲区比较","slug":"缓冲区比较","link":"#缓冲区比较","children":[]},{"level":2,"title":"拷贝缓冲区","slug":"拷贝缓冲区","link":"#拷贝缓冲区","children":[]},{"level":2,"title":"缓冲区裁剪","slug":"缓冲区裁剪","link":"#缓冲区裁剪","children":[]},{"level":2,"title":"缓冲区长度","slug":"缓冲区长度","link":"#缓冲区长度","children":[]}],"git":{"createdTime":1659328063000,"updatedTime":1659328063000,"contributors":[{"name":"yzqdev","email":"yzqdev@outlook.com","commits":1}]},"readingTime":{"minutes":5.61,"words":1684},"filePathRelative":"apis/buffer.md","localizedDate":"2022年8月1日","autoDesc":true,"excerpt":""}')},2088:(n,s,a)=>{a.r(s),a.d(s,{default:()=>c});var e=a(6808);const t=(0,e.uE)('<h1 id="buffer" tabindex="-1"><a class="header-anchor" href="#buffer" aria-hidden="true">#</a> Buffer</h1><p>JavaScript 语言自身只有字符串数据类型，没有二进制数据类型。 但在处理像TCP流或文件流时，必须使用到二进制数据。因此在 Node.js中，定义了一个 Buffer 类，该类用来创建一个专门存放二进制数据的缓存区。</p><h2 id="创建buffer" tabindex="-1"><a class="header-anchor" href="#创建buffer" aria-hidden="true">#</a> 创建buffer</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> buf <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;runoob&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;ascii&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 输出 72756e6f6f62</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buf<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">&#39;hex&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 输出 cnVub29i</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buf<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">&#39;base64&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Node.js 目前支持的字符编码包括：</strong></p><ul><li><strong>ascii</strong> - 仅支持 7 位 ASCII 数据。如果设置去掉高位的话，这种编码是非常快的。</li><li><strong>utf8</strong> - 多字节编码的 Unicode 字符。许多网页和其他文档格式都使用 UTF-8 。</li><li><strong>utf16le</strong> - 2 或 4 个字节，小字节序编码的 Unicode 字符。支持代理对（U+10000 至 U+10FFFF）。</li><li><strong>ucs2</strong> - <strong>utf16le</strong> 的别名。</li><li><strong>base64</strong> - Base64 编码。</li><li><strong>latin1</strong> - 一种把 <strong>Buffer</strong> 编码成一字节编码的字符串的方式。</li><li><strong>binary</strong> - <strong>latin1</strong> 的别名。</li><li><strong>hex</strong> - 将每个字节编码为两个十六进制字符。</li></ul><h2 id="创建-buffer-类" tabindex="-1"><a class="header-anchor" href="#创建-buffer-类" aria-hidden="true">#</a> 创建 Buffer 类</h2><p>Buffer 提供了以下 API 来创建 Buffer 类：</p><ul><li><strong>Buffer.alloc(size[, fill[, encoding]])：</strong> 返回一个指定大小的 Buffer 实例，如果没有设置 fill，则默认填满 0</li><li><strong>Buffer.allocUnsafe(size)：</strong> 返回一个指定大小的 Buffer 实例，但是它不会被初始化，所以它可能包含敏感的数据</li><li><strong>Buffer.allocUnsafeSlow(size)</strong></li><li><strong>Buffer.from(array)：</strong> 返回一个被 array 的值初始化的新的 Buffer 实例（传入的 array 的元素只能是数字，不然就会自动被 0 覆盖）</li><li><strong>Buffer.from(arrayBuffer[, byteOffset[, length]])：</strong> 返回一个新建的与给定的 ArrayBuffer 共享同一内存的 Buffer。</li><li><strong>Buffer.from(buffer)：</strong> 复制传入的 Buffer 实例的数据，并返回一个新的 Buffer 实例</li><li><strong>Buffer.from(string[, encoding])：</strong> 返回一个被 string 的值初始化的新的 Buffer 实例</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 创建一个长度为 10、且用 0 填充的 Buffer。</span>\n<span class="token keyword">const</span> buf1 <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">alloc</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 创建一个长度为 10、且用 0x1 填充的 Buffer。 </span>\n<span class="token keyword">const</span> buf2 <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">alloc</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 创建一个长度为 10、且未初始化的 Buffer。</span>\n<span class="token comment">// 这个方法比调用 Buffer.alloc() 更快，</span>\n<span class="token comment">// 但返回的 Buffer 实例可能包含旧数据，</span>\n<span class="token comment">// 因此需要使用 fill() 或 write() 重写。</span>\n<span class="token keyword">const</span> buf3 <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">allocUnsafe</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 创建一个包含 [0x1, 0x2, 0x3] 的 Buffer。</span>\n<span class="token keyword">const</span> buf4 <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 创建一个包含 UTF-8 字节 [0x74, 0xc3, 0xa9, 0x73, 0x74] 的 Buffer。</span>\n<span class="token keyword">const</span> buf5 <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;tést&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 创建一个包含 Latin-1 字节 [0x74, 0xe9, 0x73, 0x74] 的 Buffer。</span>\n<span class="token keyword">const</span> buf6 <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;tést&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;latin1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="写入缓冲区" tabindex="-1"><a class="header-anchor" href="#写入缓冲区" aria-hidden="true">#</a> 写入缓冲区</h2><p>写入 Node 缓冲区的语法如下所示：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>buf<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>string<span class="token punctuation">[</span><span class="token punctuation">,</span> offset<span class="token punctuation">[</span><span class="token punctuation">,</span> length<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">,</span> encoding<span class="token punctuation">]</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数描述如下：</p><ul><li><strong>string</strong> - 写入缓冲区的字符串。</li><li><strong>offset</strong> - 缓冲区开始写入的索引值，默认为 0 。</li><li><strong>length</strong> - 写入的字节数，默认为 buffer.length</li><li><strong>encoding</strong> - 使用的编码。默认为 &#39;utf8&#39; 。</li></ul><p>根据 encoding 的字符编码写入 string 到 buf 中的 offset 位置。 length 参数是写入的字节数。 如果 buf 没有足够的空间保存整个字符串，则只会写入 string 的一部分。 只部分解码的字符不会被写入。</p><ul><li>返回值</li></ul><p>返回实际写入的大小。如果 buffer 空间不足， 则只会写入部分字符串。</p><ul><li>实例</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>buf <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">alloc</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nlen <span class="token operator">=</span> buf<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;www.runoob.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;写入字节数 : &quot;</span><span class="token operator">+</span>  len<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行以上代码，输出结果为：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$node main.js\n写入字节数 : 14\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="从缓冲区读取数据" tabindex="-1"><a class="header-anchor" href="#从缓冲区读取数据" aria-hidden="true">#</a> 从缓冲区读取数据</h2><ul><li>语法</li></ul><p>读取 Node 缓冲区数据的语法如下所示：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>buf<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">[</span>encoding<span class="token punctuation">[</span><span class="token punctuation">,</span> start<span class="token punctuation">[</span><span class="token punctuation">,</span> end<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>参数</li></ul><p>参数描述如下：</p><ul><li><p><strong>encoding</strong> - 使用的编码。默认为 &#39;utf8&#39; 。</p></li><li><p><strong>start</strong> - 指定开始读取的索引位置，默认为 0。</p></li><li><p><strong>end</strong> - 结束位置，默认为缓冲区的末尾。</p></li><li><p>返回值</p></li></ul><p>解码缓冲区数据并使用指定的编码返回字符串。</p><ul><li>实例</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>buf <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">alloc</span><span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">26</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">97</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> buf<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">&#39;ascii&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 输出: abcdefghijklmnopqrstuvwxyz</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> buf<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">&#39;ascii&#39;</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//使用 &#39;ascii&#39; 编码, 并输出: abcde</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> buf<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">&#39;utf8&#39;</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 使用 &#39;utf8&#39; 编码, 并输出: abcde</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> buf<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 使用默认的 &#39;utf8&#39; 编码, 并输出: abcde</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行以上代码，输出结果为：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$ node main.js\nabcdefghijklmnopqrstuvwxyz\nabcde\nabcde\nabcde\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="将-buffer-转换为-json-对象" tabindex="-1"><a class="header-anchor" href="#将-buffer-转换为-json-对象" aria-hidden="true">#</a> 将 Buffer 转换为 JSON 对象</h2><ul><li>语法</li></ul><p>将 Node Buffer 转换为 JSON 对象的函数语法格式如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>buf<span class="token punctuation">.</span><span class="token function">toJSON</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>',40),p={href:"https://www.runoob.com/js/javascript-json-stringify.html",target:"_blank",rel:"noopener noreferrer"},o=(0,e._)("strong",null,"toJSON()",-1),l=(0,e.uE)('<ul><li>返回值</li></ul><p>返回 JSON 对象。</p><ul><li>实例</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>const buf = Buffer.from([0x1, 0x2, 0x3, 0x4, 0x5]);\nconst json = JSON.stringify(buf);\n\n// 输出: {&quot;type&quot;:&quot;Buffer&quot;,&quot;data&quot;:[1,2,3,4,5]}\nconsole.log(json);\n\nconst copy = JSON.parse(json, (key, value) =&gt; {\n  return value &amp;&amp; value.type === &#39;Buffer&#39; ?\n    Buffer.from(value.data) :\n    value;\n});\n\n// 输出: &lt;Buffer 01 02 03 04 05&gt;\nconsole.log(copy);\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行以上代码，输出结果为：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>{&quot;type&quot;:&quot;Buffer&quot;,&quot;data&quot;:[1,2,3,4,5]}\n&lt;Buffer 01 02 03 04 05&gt;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="缓冲区合并" tabindex="-1"><a class="header-anchor" href="#缓冲区合并" aria-hidden="true">#</a> 缓冲区合并</h2><ul><li>语法</li></ul><p>Node 缓冲区合并的语法如下所示：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Buffer.concat(list[, totalLength])\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>参数</li></ul><p>参数描述如下：</p><ul><li><p><strong>list</strong> - 用于合并的 Buffer 对象数组列表。</p></li><li><p><strong>totalLength</strong> - 指定合并后Buffer对象的总长度。</p></li><li><p>返回值</p></li></ul><p>返回一个多个成员合并的新 Buffer 对象。</p><ul><li>实例</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> buffer1 <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">&#39;菜鸟教程&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> buffer2 <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">&#39;www.runoob.com&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> buffer3 <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span>buffer1<span class="token punctuation">,</span>buffer2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;buffer3 内容: &quot;</span> <span class="token operator">+</span> buffer3<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行以上代码，输出结果为：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>buffer3 内容: 菜鸟教程www.runoob.com\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr><h2 id="缓冲区比较" tabindex="-1"><a class="header-anchor" href="#缓冲区比较" aria-hidden="true">#</a> 缓冲区比较</h2><ul><li>语法</li></ul><p>Node Buffer 比较的函数语法如下所示, 该方法在 Node.js v0.12.2 版本引入：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>buf.compare(otherBuffer);\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>参数</li></ul><p>参数描述如下：</p><ul><li><p><strong>otherBuffer</strong> - 与 <strong>buf</strong> 对象比较的另外一个 Buffer 对象。</p></li><li><p>返回值</p></li></ul><p>返回一个数字，表示 <strong>buf</strong> 在 <strong>otherBuffer</strong> 之前，之后或相同。</p><ul><li>实例</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> buffer1 <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;ABC&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> buffer2 <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;ABCD&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> result <span class="token operator">=</span> buffer1<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>buffer2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">if</span><span class="token punctuation">(</span>result <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buffer1 <span class="token operator">+</span> <span class="token string">&quot; 在 &quot;</span> <span class="token operator">+</span> buffer2 <span class="token operator">+</span> <span class="token string">&quot;之前&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>result <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buffer1 <span class="token operator">+</span> <span class="token string">&quot; 与 &quot;</span> <span class="token operator">+</span> buffer2 <span class="token operator">+</span> <span class="token string">&quot;相同&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>\n   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buffer1 <span class="token operator">+</span> <span class="token string">&quot; 在 &quot;</span> <span class="token operator">+</span> buffer2 <span class="token operator">+</span> <span class="token string">&quot;之后&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行以上代码，输出结果为：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>ABC在ABCD之前\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr><h2 id="拷贝缓冲区" tabindex="-1"><a class="header-anchor" href="#拷贝缓冲区" aria-hidden="true">#</a> 拷贝缓冲区</h2><ul><li>语法</li></ul><p>Node 缓冲区拷贝语法如下所示：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>buf.copy(targetBuffer[, targetStart[, sourceStart[, sourceEnd]]])\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>参数</li></ul><p>参数描述如下：</p><ul><li><p><strong>targetBuffer</strong> - 要拷贝的 Buffer 对象。</p></li><li><p><strong>targetStart</strong> - 数字, 可选, 默认: 0</p></li><li><p><strong>sourceStart</strong> - 数字, 可选, 默认: 0</p></li><li><p><strong>sourceEnd</strong> - 数字, 可选, 默认: buffer.length</p></li><li><p>返回值</p></li></ul><p>没有返回值。</p><ul><li>实例</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> buf1 <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;abcdefghijkl&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> buf2 <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;RUNOOB&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">//将 buf2 插入到 buf1 指定位置上</span>\nbuf2<span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span>buf1<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buf1<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行以上代码，输出结果为：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>abRUNOOBijkl\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr><h2 id="缓冲区裁剪" tabindex="-1"><a class="header-anchor" href="#缓冲区裁剪" aria-hidden="true">#</a> 缓冲区裁剪</h2><p>Node 缓冲区裁剪语法如下所示：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>buf.slice([start[, end]])\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>参数</li></ul><p>参数描述如下：</p><ul><li><p><strong>start</strong> - 数字, 可选, 默认: 0</p></li><li><p><strong>end</strong> - 数字, 可选, 默认: buffer.length</p></li><li><p>返回值</p></li></ul><p>返回一个新的缓冲区，它和旧缓冲区指向同一块内存，但是从索引 start 到 end 的位置剪切。</p><ul><li>实例</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>let buffer1 = Buffer.from(&#39;runoob&#39;);\n// 剪切缓冲区\nlet buffer2 = buffer1.slice(0,2);\nconsole.log(&quot;buffer2 content: &quot; + buffer2.toString());\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行以上代码，输出结果为：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>buffer2 content: ru\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr><h2 id="缓冲区长度" tabindex="-1"><a class="header-anchor" href="#缓冲区长度" aria-hidden="true">#</a> 缓冲区长度</h2><ul><li>语法</li></ul><p>Node 缓冲区长度计算语法如下所示：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>buf.length;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>返回值</li></ul><p>返回 Buffer 对象所占据的内存长度。</p><ul><li>实例</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>let buffer = Buffer.from(&#39;www.runoob.com&#39;);\n//  缓冲区长度\nconsole.log(&quot;buffer length: &quot; + buffer.length);\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行以上代码，输出结果为：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>buffer length: 14\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>',68),i={},c=(0,a(8580).Z)(i,[["render",function(n,s){const a=(0,e.up)("ExternalLinkIcon");return(0,e.wg)(),(0,e.iD)("div",null,[t,(0,e._)("p",null,[(0,e.Uk)("当字符串化一个 Buffer 实例时，"),(0,e._)("a",p,[(0,e.Uk)("JSON.stringify()"),(0,e.Wm)(a)]),(0,e.Uk)(" 会隐式地调用该 "),o,(0,e.Uk)("。")]),l])}]])},8580:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,e]of s)a[n]=e;return a}}}]);