"use strict";(self.webpackChunknode_docs=self.webpackChunknode_docs||[]).push([[2553],{6477:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t=JSON.parse('{"key":"v-26adc262","path":"/node-lessons/lesson5.html","title":"5.使用 eventproxy 控制并发","lang":"zh-CN","frontmatter":{"order":5,"description":"目标 建立一个 lesson5项目，在其中编写代码。 代码的入口是 app.js，当调用 node app.js 时，它会输出 CNode( ) 社区首页的所有主题的标题，链接和第一条评论，以 json 的格式。 输出示例： 挑战 以上文目标为基础，输出 comment1 的作者，以及他在 cnode 社区的积分值。 示例： 知识点 1. 体会 Nod...","head":[["meta",{"property":"og:url","content":"https://yzqdev.github.io/node-docs/node-docs/node-lessons/lesson5.html"}],["meta",{"property":"og:site_name","content":"node-docs"}],["meta",{"property":"og:title","content":"5.使用 eventproxy 控制并发"}],["meta",{"property":"og:description","content":"目标 建立一个 lesson5项目，在其中编写代码。 代码的入口是 app.js，当调用 node app.js 时，它会输出 CNode( ) 社区首页的所有主题的标题，链接和第一条评论，以 json 的格式。 输出示例： 挑战 以上文目标为基础，输出 comment1 的作者，以及他在 cnode 社区的积分值。 示例： 知识点 1. 体会 Nod..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-03-26T15:48:25.000Z"}],["meta",{"property":"article:modified_time","content":"2022-03-26T15:48:25.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"5.使用 eventproxy 控制并发\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2022-03-26T15:48:25.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"目标","slug":"目标","link":"#目标","children":[]},{"level":2,"title":"挑战","slug":"挑战","link":"#挑战","children":[]},{"level":2,"title":"知识点","slug":"知识点","link":"#知识点","children":[]},{"level":2,"title":"课程内容","slug":"课程内容","link":"#课程内容","children":[]}],"git":{"createdTime":1648309705000,"updatedTime":1648309705000,"contributors":[{"name":"yzqdev","email":"yzqdev@outlook.com","commits":1}]},"readingTime":{"minutes":7.47,"words":2240},"filePathRelative":"node-lessons/lesson5.md","localizedDate":"2022年3月26日","autoDesc":true,"excerpt":""}')},1868:(n,s,a)=>{a.r(s),a.d(s,{default:()=>w});var t=a(6808);const p=(0,t._)("h1",{id:"_5-使用-eventproxy-控制并发",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#_5-使用-eventproxy-控制并发","aria-hidden":"true"},"#"),(0,t.Uk)(" 5.使用 eventproxy 控制并发")],-1),e=(0,t._)("h2",{id:"目标",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#目标","aria-hidden":"true"},"#"),(0,t.Uk)(" 目标")],-1),o=(0,t._)("p",null,"建立一个 lesson5项目，在其中编写代码。",-1),c=(0,t._)("code",null,"app.js",-1),l=(0,t._)("code",null,"node app.js",-1),u={href:"https://cnodejs.org/",target:"_blank",rel:"noopener noreferrer"},i=(0,t.uE)('<p>输出示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">[</span>\n  <span class="token punctuation">{</span>\n    <span class="token string-property property">&quot;title&quot;</span><span class="token operator">:</span> <span class="token string">&quot;【公告】发招聘帖的同学留意一下这里&quot;</span><span class="token punctuation">,</span>\n    <span class="token string-property property">&quot;href&quot;</span><span class="token operator">:</span> <span class="token string">&quot;http://cnodejs.org/topic/541ed2d05e28155f24676a12&quot;</span><span class="token punctuation">,</span>\n    <span class="token string-property property">&quot;comment1&quot;</span><span class="token operator">:</span> <span class="token string">&quot;呵呵呵呵&quot;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    <span class="token string-property property">&quot;title&quot;</span><span class="token operator">:</span> <span class="token string">&quot;发布一款 Sublime Text 下的 JavaScript 语法高亮插件&quot;</span><span class="token punctuation">,</span>\n    <span class="token string-property property">&quot;href&quot;</span><span class="token operator">:</span> <span class="token string">&quot;http://cnodejs.org/topic/54207e2efffeb6de3d61f68f&quot;</span><span class="token punctuation">,</span>\n    <span class="token string-property property">&quot;comment1&quot;</span><span class="token operator">:</span> <span class="token string">&quot;沙发！&quot;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="挑战" tabindex="-1"><a class="header-anchor" href="#挑战" aria-hidden="true">#</a> 挑战</h2><p>以上文目标为基础，输出 <code>comment1</code> 的作者，以及他在 cnode 社区的积分值。</p><p>示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">[</span>\n  <span class="token punctuation">{</span>\n    <span class="token string-property property">&quot;title&quot;</span><span class="token operator">:</span> <span class="token string">&quot;【公告】发招聘帖的同学留意一下这里&quot;</span><span class="token punctuation">,</span>\n    <span class="token string-property property">&quot;href&quot;</span><span class="token operator">:</span> <span class="token string">&quot;http://cnodejs.org/topic/541ed2d05e28155f24676a12&quot;</span><span class="token punctuation">,</span>\n    <span class="token string-property property">&quot;comment1&quot;</span><span class="token operator">:</span> <span class="token string">&quot;呵呵呵呵&quot;</span><span class="token punctuation">,</span>\n    <span class="token string-property property">&quot;author1&quot;</span><span class="token operator">:</span> <span class="token string">&quot;auser&quot;</span><span class="token punctuation">,</span>\n    <span class="token string-property property">&quot;score1&quot;</span><span class="token operator">:</span> <span class="token number">80</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token operator">...</span>\n<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="知识点" tabindex="-1"><a class="header-anchor" href="#知识点" aria-hidden="true">#</a> 知识点</h2><ol><li>体会 Node.js 的 callback hell 之美</li><li>学习使用 eventproxy 这一利器控制并发</li></ol><h2 id="课程内容" tabindex="-1"><a class="header-anchor" href="#课程内容" aria-hidden="true">#</a> 课程内容</h2><p><em>注意，cnodejs.org 网站有并发连接数的限制，所以当请求发送太快的时候会导致返回值为空或报错。建议一次抓取3个主题即可。文中的40只是为了方便讲解</em></p><p>这一章我们来到了 Node.js 最牛逼的地方——异步并发的内容了。</p><p>上一课我们介绍了如何使用 superagent 和 cheerio 来取主页内容，那只需要发起一次 http get 请求就能办到。但这次，我们需要取出每个主题的第一条评论，这就要求我们对每个主题的链接发起请求，并用 cheerio 去取出其中的第一条评论。</p><p>CNode 目前每一页有 40 个主题，于是我们就需要发起 1 + 40 个请求，来达到我们这一课的目标。</p>',13),r={href:"http://book.douban.com/subject/25768396/",target:"_blank",rel:"noopener noreferrer"},k=(0,t._)("p",null,"有些逼格比较高的朋友可能听说过 promise 和 generator 这类概念。不过我呢，只会讲 callback，主要原因是我个人只喜欢 callback。",-1),d={href:"https://github.com/JacksonTian/eventproxy",target:"_blank",rel:"noopener noreferrer"},v=(0,t.uE)('<p>手脚架的工作各位自己来，我们一步一步来一起写出这个程序。</p><p>首先 app.js 应该长这样</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span>  eventproxy <span class="token keyword">from</span> <span class="token string">&#39;eventproxy&#39;</span>\n<span class="token keyword">import</span> superagent <span class="token keyword">from</span> <span class="token string">&#39;superagent&#39;</span>\n<span class="token keyword">import</span> express <span class="token keyword">from</span> <span class="token string">&#39;express&#39;</span>\n<span class="token keyword">import</span> cheerio <span class="token keyword">from</span> <span class="token string">&#39;cheerio&#39;</span>\n<span class="token keyword">import</span> superagent <span class="token keyword">from</span> <span class="token string">&#39;superagent&#39;</span>\n<span class="token comment">// url 模块是 Node.js 标准库里面的</span>\n<span class="token comment">// http://nodejs.org/api/url.html</span>\n<span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;url&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">let</span> cnodeUrl <span class="token operator">=</span> <span class="token string">&#39;https://cnodejs.org/&#39;</span><span class="token punctuation">;</span>\n\nsuperagent<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>cnodeUrl<span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">let</span> topicUrls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">let</span> $ <span class="token operator">=</span> cheerio<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// 获取首页所有的链接</span>\n    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;#topic_list .topic_title&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">idx<span class="token punctuation">,</span> element</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">let</span> $element <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token comment">// $element.attr(&#39;href&#39;) 本来的样子是 /topic/542acd7d5d28233425538b04</span>\n      <span class="token comment">// 我们用 url.resolve 来自动推断出完整 url，变成</span>\n      <span class="token comment">// https://cnodejs.org/topic/542acd7d5d28233425538b04 的形式</span>\n      <span class="token comment">// 具体请看 http://nodejs.org/api/url.html#url_url_resolve_from_to 的示例</span>\n      <span class="token keyword">let</span> href <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>cnodeUrl<span class="token punctuation">,</span> $element<span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">&#39;href&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      topicUrls<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>href<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>topicUrls<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行 <code>node app.js</code></p><p>输出如下图：</p><p><img src="https://raw.githubusercontent.com/alsotang/node-lessons/master/lesson4/1.png" alt=""></p><p>OK，这时候我们已经得到所有 url 的地址了，接下来，我们把这些地址都抓取一遍，就完成了，Node.js 就是这么简单。</p><p>抓取之前，还是得介绍一下 eventproxy 这个库。</p><p>用 js 写过异步的同学应该都知道，如果你要并发异步获取两三个地址的数据，并且要在获取到数据之后，对这些数据一起进行利用的话，常规的写法是自己维护一个计数器。</p><p>先定义一个 <code>let count = 0</code>，然后每次抓取成功以后，就 <code>count++</code>。如果你是要抓取三个源的数据，由于你根本不知道这些异步操作到底谁先完成，那么每次当抓取成功的时候，就判断一下 <code>count === 3</code>。当值为真时，使用另一个函数继续完成操作。</p><p>而 eventproxy 就起到了这个计数器的作用，它来帮你管理到底这些异步操作是否完成，完成之后，它会自动调用你提供的处理函数，并将抓取到的数据当参数传过来。</p><p>假设我们不使用 eventproxy 也不使用计数器时，抓取三个源的写法是这样的：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 参考 jquery 的 $.get 的方法</span>\n$<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;http://data1_source&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// something</span>\n  $<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;http://data2_source&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// something</span>\n    $<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;http://data3_source&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// something</span>\n      <span class="token keyword">let</span> html <span class="token operator">=</span> <span class="token function">fuck</span><span class="token punctuation">(</span>data1<span class="token punctuation">,</span> data2<span class="token punctuation">,</span> data3<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token function">render</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述的代码大家都写过吧。先获取 data1，获取完成之后获取 data2，然后再获取 data3，然后 fuck 它们，进行输出。</p><p>但大家应该也想到了，其实这三个源的数据，是可以并行去获取的，data2 的获取并不依赖 data1 的完成，data3 同理也不依赖 data2。</p><p>于是我们用计数器来写，会写成这样：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  $<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;http://data1_source&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    result<span class="token punctuation">.</span>data1 <span class="token operator">=</span> data<span class="token punctuation">;</span>\n    count<span class="token operator">++</span><span class="token punctuation">;</span>\n    <span class="token function">handle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  $<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;http://data2_source&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    result<span class="token punctuation">.</span>data2 <span class="token operator">=</span> data<span class="token punctuation">;</span>\n    count<span class="token operator">++</span><span class="token punctuation">;</span>\n    <span class="token function">handle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  $<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;http://data3_source&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    result<span class="token punctuation">.</span>data3 <span class="token operator">=</span> data<span class="token punctuation">;</span>\n    count<span class="token operator">++</span><span class="token punctuation">;</span>\n    <span class="token function">handle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">function</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">===</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">let</span> html <span class="token operator">=</span> <span class="token function">fuck</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>data1<span class="token punctuation">,</span> result<span class="token punctuation">.</span>data2<span class="token punctuation">,</span> result<span class="token punctuation">.</span>data3<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token function">render</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>丑的一逼， 也不算丑，主要我写代码好看。</p><p>如果我们用 eventproxy，写出来是这样的：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> ep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">eventproxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nep<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token string">&#39;data1_event&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;data2_event&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;data3_event&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data1<span class="token punctuation">,</span> data2<span class="token punctuation">,</span> data3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> html <span class="token operator">=</span> <span class="token function">fuck</span><span class="token punctuation">(</span>data1<span class="token punctuation">,</span> data2<span class="token punctuation">,</span> data3<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">render</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n$<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;http://data1_source&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  ep<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;data1_event&#39;</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n$<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;http://data2_source&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  ep<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;data2_event&#39;</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n$<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;http://data3_source&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  ep<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;data3_event&#39;</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>好看多了是吧，也就是个高等计数器嘛。</p><p><code>ep.all(&#39;data1_event&#39;, &#39;data2_event&#39;, &#39;data3_event&#39;, function (data1, data2, data3) {});</code></p><p>这一句，监听了三个事件，分别是 <code>data1_event, data2_event, data3_event</code>，每次当一个源的数据抓取完成时，就通过 <code>ep.emit()</code> 来告诉 <code>ep</code> 自己，某某事件已经完成了。</p><p>当三个事件未同时完成时，<code>ep.emit()</code> 调用之后不会做任何事；当三个事件都完成的时候，就会调用末尾的那个回调函数，来对它们进行统一处理。</p><p>eventproxy 提供了不少其他场景所需的 API，但最最常用的用法就是以上的这种，即：</p><ol><li>先 <code>let ep = new eventproxy();</code> 得到一个 eventproxy 实例。</li><li>告诉它你要监听哪些事件，并给它一个回调函数。<code>ep.all(&#39;event1&#39;, &#39;event2&#39;, function (result1, result2) {})</code>。</li><li>在适当的时候 <code>ep.emit(&#39;event_name&#39;, eventData)</code>。</li></ol><p>eventproxy 这套处理异步并发的思路，我一直觉得就像是汇编里面的 goto 语句一样，程序逻辑在代码中随处跳跃。本来代码已经执行到 100 行了，突然 80 行的那个回调函数又开始工作了。如果你异步逻辑复杂点的话，80 行的这个函数完成之后，又激活了 60 行的另外一个函数。并发和嵌套的问题虽然解决了，但老祖宗们消灭了几十年的 goto 语句又回来了。</p>',27),m={href:"http://www.cnblogs.com/damonlan/archive/2012/07/01/2553425.html",target:"_blank",rel:"noopener noreferrer"},b=(0,t._)("p",null,"编程语言美丑啥的，咱心中有佛就好。",-1),g=(0,t._)("p",null,[(0,t.Uk)("回到正题，之前我们已经得到了一个长度为 40 的 "),(0,t._)("code",null,"topicUrls"),(0,t.Uk)(" 数组，里面包含了每条主题的链接。那么意味着，我们接下来要发出 40 个并发请求。我们需要用到 eventproxy 的 "),(0,t._)("code",null,"#after"),(0,t.Uk)(" API。")],-1),f={href:"https://github.com/JacksonTian/eventproxy#%E9%87%8D%E5%A4%8D%E5%BC%82%E6%AD%A5%E5%8D%8F%E4%BD%9C",target:"_blank",rel:"noopener noreferrer"},h=(0,t.uE)('<p>我代码就直接贴了哈。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 得到 topicUrls 之后</span>\n\n<span class="token comment">// 得到一个 eventproxy 的实例</span>\n<span class="token keyword">let</span> ep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">eventproxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 命令 ep 重复监听 topicUrls.length 次（在这里也就是 40 次） `topic_html` 事件再行动</span>\nep<span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span><span class="token string">&#39;topic_html&#39;</span><span class="token punctuation">,</span> topicUrls<span class="token punctuation">.</span>length<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">topics</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// topics 是个数组，包含了 40 次 ep.emit(&#39;topic_html&#39;, pair) 中的那 40 个 pair</span>\n\n  <span class="token comment">// 开始行动</span>\n  topics <span class="token operator">=</span> topics<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">topicPair</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 接下来都是 jquery 的用法了</span>\n    <span class="token keyword">let</span> topicUrl <span class="token operator">=</span> topicPair<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">let</span> topicHtml <span class="token operator">=</span> topicPair<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">let</span> $ <span class="token operator">=</span> cheerio<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>topicHtml<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n      <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;.topic_full_title&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token literal-property property">href</span><span class="token operator">:</span> topicUrl<span class="token punctuation">,</span>\n      <span class="token literal-property property">comment1</span><span class="token operator">:</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;.reply_content&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;final:&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>topics<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\ntopicUrls<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">topicUrl</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  superagent<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>topicUrl<span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;fetch &#39;</span> <span class="token operator">+</span> topicUrl <span class="token operator">+</span> <span class="token string">&#39; successful&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      ep<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;topic_html&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>topicUrl<span class="token punctuation">,</span> res<span class="token punctuation">.</span>text<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出长这样：</p><p><img src="https://raw.githubusercontent.com/alsotang/node-lessons/master/lesson4/2.png" alt=""></p><p>完整的代码请查看 lesson4 目录下的 app.js 文件</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> eventproxy <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;eventproxy&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> superagent <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;superagent&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> cheerio <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;cheerio&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;url&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">let</span> cnodeUrl <span class="token operator">=</span> <span class="token string">&#39;https://cnodejs.org/&#39;</span><span class="token punctuation">;</span>\n\nsuperagent<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>cnodeUrl<span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">let</span> topicUrls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">let</span> $ <span class="token operator">=</span> cheerio<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;#topic_list .topic_title&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">idx<span class="token punctuation">,</span> element</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">let</span> $element <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">let</span> href <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>cnodeUrl<span class="token punctuation">,</span> $element<span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">&#39;href&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      topicUrls<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>href<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">let</span> ep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">eventproxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    ep<span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span><span class="token string">&#39;topic_html&#39;</span><span class="token punctuation">,</span> topicUrls<span class="token punctuation">.</span>length<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">topics</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      topics <span class="token operator">=</span> topics<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">topicPair</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> topicUrl <span class="token operator">=</span> topicPair<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token keyword">let</span> topicHtml <span class="token operator">=</span> topicPair<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token keyword">let</span> $ <span class="token operator">=</span> cheerio<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>topicHtml<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n          <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;.topic_full_title&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n          <span class="token literal-property property">href</span><span class="token operator">:</span> topicUrl<span class="token punctuation">,</span>\n          <span class="token literal-property property">comment1</span><span class="token operator">:</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;.reply_content&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;final:&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>topics<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    topicUrls<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">topicUrl</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      superagent<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>topicUrl<span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;fetch &#39;</span> <span class="token operator">+</span> topicUrl <span class="token operator">+</span> <span class="token string">&#39; successful&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n          ep<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;topic_html&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>topicUrl<span class="token punctuation">,</span> res<span class="token punctuation">.</span>text<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',6),y={},w=(0,a(8580).Z)(y,[["render",function(n,s){const a=(0,t.up)("ExternalLinkIcon");return(0,t.wg)(),(0,t.iD)("div",null,[p,e,o,(0,t._)("p",null,[(0,t.Uk)("代码的入口是 "),c,(0,t.Uk)("，当调用 "),l,(0,t.Uk)(" 时，它会输出 CNode("),(0,t._)("a",u,[(0,t.Uk)("https://cnodejs.org/"),(0,t.Wm)(a)]),(0,t.Uk)(" ) 社区首页的所有主题的标题，链接和第一条评论，以 json 的格式。")]),i,(0,t._)("p",null,[(0,t.Uk)("后者的 40 个请求，我们并发地发起：），而且不会遇到多线程啊锁什么的，Node.js 的并发模型跟多线程不同，抛却那些观念。更具体一点的话，比如异步到底为何异步，Node.js 为何单线程却能并发这类走近科学的问题，我就不打算讲了。对于这方面有兴趣的同学，强烈推荐 @朴灵 的 《九浅一深Node.js》： "),(0,t._)("a",r,[(0,t.Uk)("http://book.douban.com/subject/25768396/"),(0,t.Wm)(a)]),(0,t.Uk)(" 。")]),k,(0,t._)("p",null,[(0,t.Uk)("这次课程我们需要用到三个库：superagent cheerio eventproxy("),(0,t._)("a",d,[(0,t.Uk)("https://github.com/JacksonTian/eventproxy"),(0,t.Wm)(a)]),(0,t.Uk)(" )")]),v,(0,t._)("p",null,[(0,t.Uk)("至于这套思想糟糕不糟糕，我个人倒是觉得还是不糟糕，用熟了看起来蛮清晰的。不过 js 这门渣渣语言本来就乱嘛，什么变量提升（"),(0,t._)("a",m,[(0,t.Uk)("http://www.cnblogs.com/damonlan/archive/2012/07/01/2553425.html"),(0,t.Wm)(a)]),(0,t.Uk)(" ）啊，没有 main 函数啊，变量作用域啊，数据类型常常简单得只有数字、字符串、哈希、数组啊，这一系列的问题，都不是事儿。")]),b,g,(0,t._)("p",null,[(0,t.Uk)("大家自行学习一下这个 API 吧："),(0,t._)("a",f,[(0,t.Uk)("https://github.com/JacksonTian/eventproxy#重复异步协作"),(0,t.Wm)(a)])]),h])}]])},8580:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,t]of s)a[n]=t;return a}}}]);