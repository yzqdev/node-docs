"use strict";(self.webpackChunknode_docs=self.webpackChunknode_docs||[]).push([[6819],{1181:(n,a,s)=>{s.r(a),s.d(a,{data:()=>e});const e=JSON.parse('{"key":"v-37a64752","path":"/node-lessons/lesson15.html","title":"15.js 中的那些最佳实践","lang":"zh-CN","frontmatter":{"order":15,"description":"这个章节需要大家帮忙补充，一次性想不完那么多 JavaScript 语言精粹 这本书很薄，只有 155 页，但该讲的几乎都讲了。大家想办法搞来看看吧（我总不能很没节操地给个电子版 PDF 链接在这里吧）。 js 这门语言，水很浅。没有太复杂的地方可以钻，但特么的坑又多。 上面的那本书是一定要看的。这本书专注在讲 js 语法，其他 js 的书都过多地涉及...","head":[["meta",{"property":"og:url","content":"https://yzqdev.github.io/node-docs/node-docs/node-lessons/lesson15.html"}],["meta",{"property":"og:site_name","content":"node-docs"}],["meta",{"property":"og:title","content":"15.js 中的那些最佳实践"}],["meta",{"property":"og:description","content":"这个章节需要大家帮忙补充，一次性想不完那么多 JavaScript 语言精粹 这本书很薄，只有 155 页，但该讲的几乎都讲了。大家想办法搞来看看吧（我总不能很没节操地给个电子版 PDF 链接在这里吧）。 js 这门语言，水很浅。没有太复杂的地方可以钻，但特么的坑又多。 上面的那本书是一定要看的。这本书专注在讲 js 语法，其他 js 的书都过多地涉及..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-03-26T15:48:25.000Z"}],["meta",{"property":"article:modified_time","content":"2022-03-26T15:48:25.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"15.js 中的那些最佳实践\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2022-03-26T15:48:25.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":3,"title":"JavaScript 语言精粹","slug":"javascript-语言精粹","link":"#javascript-语言精粹","children":[]},{"level":3,"title":"继承","slug":"继承","link":"#继承","children":[]},{"level":3,"title":"callback hell","slug":"callback-hell","link":"#callback-hell","children":[]},{"level":3,"title":"数据类型","slug":"数据类型","link":"#数据类型","children":[]},{"level":3,"title":"控制流","slug":"控制流","link":"#控制流","children":[]},{"level":3,"title":"基本运算符","slug":"基本运算符","link":"#基本运算符","children":[]},{"level":3,"title":"计算型属性","slug":"计算型属性","link":"#计算型属性","children":[]},{"level":3,"title":"运算符重载","slug":"运算符重载","link":"#运算符重载","children":[]},{"level":3,"title":"类型转换","slug":"类型转换","link":"#类型转换","children":[]},{"level":3,"title":"相等比较","slug":"相等比较","link":"#相等比较","children":[]},{"level":3,"title":"嵌套类型","slug":"嵌套类型","link":"#嵌套类型","children":[]},{"level":3,"title":"拓展","slug":"拓展","link":"#拓展","children":[]},{"level":3,"title":"函数式编程","slug":"函数式编程","link":"#函数式编程","children":[]},{"level":3,"title":"泛型","slug":"泛型","link":"#泛型","children":[]},{"level":3,"title":"权限控制","slug":"权限控制","link":"#权限控制","children":[]},{"level":3,"title":"设计模式","slug":"设计模式","link":"#设计模式","children":[]},{"level":3,"title":"构建大型项目","slug":"构建大型项目","link":"#构建大型项目","children":[]},{"level":2,"title":"设计模式","slug":"设计模式-1","link":"#设计模式-1","children":[]}],"git":{"createdTime":1648309705000,"updatedTime":1648309705000,"contributors":[{"name":"yzqdev","email":"yzqdev@outlook.com","commits":1}]},"readingTime":{"minutes":8.75,"words":2624},"filePathRelative":"node-lessons/lesson15.md","localizedDate":"2022年3月26日","autoDesc":true,"excerpt":""}')},2376:(n,a,s)=>{s.r(a),s.d(a,{default:()=>j});var e=s(6808);const t=(0,e._)("h1",{id:"_15-js-中的那些最佳实践",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_15-js-中的那些最佳实践","aria-hidden":"true"},"#"),(0,e.Uk)(" 15.js 中的那些最佳实践")],-1),o=(0,e._)("p",null,[(0,e._)("strong",null,"这个章节需要大家帮忙补充，一次性想不完那么多")],-1),p=(0,e._)("hr",null,null,-1),l=(0,e._)("h3",{id:"javascript-语言精粹",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#javascript-语言精粹","aria-hidden":"true"},"#"),(0,e.Uk)(" JavaScript 语言精粹")],-1),i={href:"http://book.douban.com/subject/3590768/",target:"_blank",rel:"noopener noreferrer"},c=(0,e.uE)('<p><img src="https://github.com/alsotang/node-lessons/blob/master/lesson14/1.png" alt=""></p><p>这本书很薄，只有 155 页，但该讲的几乎都讲了。大家想办法搞来看看吧（我总不能很没节操地给个电子版 PDF 链接在这里吧）。</p><p>js 这门语言，水很浅。没有太复杂的地方可以钻，但特么的坑又多。</p><p>上面的那本书是一定要看的。这本书专注在讲 js 语法，其他 js 的书都过多地涉及了浏览器知识。</p><h3 id="继承" tabindex="-1"><a class="header-anchor" href="#继承" aria-hidden="true">#</a> 继承</h3><p>js 前端不懂有什么好办法，后端的话，很方便。</p><p>用 node 官方的 <code>util</code> 库，下面是直接从官网摘抄来的：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> util <span class="token keyword">from</span> <span class="token string">&#39;util&#39;</span>\n<span class="token keyword">import</span> <span class="token string">&#39;events from &#39;</span>events&#39;\n\n<span class="token keyword">function</span> <span class="token function">MyStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    events<span class="token punctuation">.</span><span class="token function">EventEmitter</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\nutil<span class="token punctuation">.</span><span class="token function">inherits</span><span class="token punctuation">(</span>MyStream<span class="token punctuation">,</span> events<span class="token punctuation">.</span>EventEmitter<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token class-name">MyStream</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">write</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&quot;data&quot;</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> stream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stream <span class="token keyword">instanceof</span> <span class="token class-name">events<span class="token punctuation">.</span>EventEmitter</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>MyStream<span class="token punctuation">.</span>super_ <span class="token operator">===</span> events<span class="token punctuation">.</span>EventEmitter<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n\nstream<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;data&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Received data: &quot;&#39;</span> <span class="token operator">+</span> data <span class="token operator">+</span> <span class="token string">&#39;&quot;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\nstream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;It works!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Received data: &quot;It works!&quot;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>js 是面向对象的，但是是“基于原型的面向对象”，没有类。没有多重继承，没有接口。没有结构体，没有枚举类型。</p><p>但它的字面量哈希和 function 都足够灵活，拼拼凑凑，上面那些东西都能“模拟”着用。</p><p>说到没有类的这个问题，很多人总是要纠正其他人关于 js 原型的理解的。我觉得这是没有必要的。基于原型又不是很牛逼，ES6不是照样给出了 class 关键字吗。不管类还是原型都是为了抽象，烂的东西始终烂，不好理解的始终不好理解。</p><p>最近学习 ios 的 swift，看见里面有不少相比 objc 舒服的改进。比如 objc 的“方法调用”，学的是 smalltalk 那一套，那不叫方法调用，而是消息传递。结果 swift 里面不照样是方法调用的形式？</p><h3 id="callback-hell" tabindex="-1"><a class="header-anchor" href="#callback-hell" aria-hidden="true">#</a> callback hell</h3><p>用 eventproxy 和 async 已经能解决大部分问题。剩下的小部分问题，肯定是设计错误。：）</p><p>参见：</p>',15),r={href:"https://github.com/alsotang/node-lessons/tree/master/lesson4",target:"_blank",rel:"noopener noreferrer"},d={href:"https://github.com/alsotang/node-lessons/tree/master/lesson5",target:"_blank",rel:"noopener noreferrer"},u=(0,e.uE)('<h3 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型" aria-hidden="true">#</a> 数据类型</h3><p>写 js 很少去定义类。Object 的便利在多数其他语言需要定义类的场景下都能直接用。</p><p>js 中，用好 Number，String，Array，Object 和 Function 就够了。有时用用 RegExp。</p><p>用于 js 这门语言本身的残废，大多数时候都采用“约定胜于配置”的思想来交互合作。</p><h3 id="控制流" tabindex="-1"><a class="header-anchor" href="#控制流" aria-hidden="true">#</a> 控制流</h3><p>很常规，C 语言那套。</p><h3 id="基本运算符" tabindex="-1"><a class="header-anchor" href="#基本运算符" aria-hidden="true">#</a> 基本运算符</h3><p>C 语言那套。二进制操作并不会降低效率，V8 很聪明的。</p><h3 id="计算型属性" tabindex="-1"><a class="header-anchor" href="#计算型属性" aria-hidden="true">#</a> 计算型属性</h3><p>也就是帮一个对象的属性定义 get 和 set 方法，通过 <code>obj.value</code> 和 <code>obj.value=</code> 的形式来调用。</p>',10),h={href:"http://koajs.com/",target:"_blank",rel:"noopener noreferrer"},k=(0,e.uE)('<h3 id="运算符重载" tabindex="-1"><a class="header-anchor" href="#运算符重载" aria-hidden="true">#</a> 运算符重载</h3><p>无</p><h3 id="类型转换" tabindex="-1"><a class="header-anchor" href="#类型转换" aria-hidden="true">#</a> 类型转换</h3><p>手动帮你需要转换的类型的类定义 <code>.toxxx</code> 方法，比如 <code>.toString</code>，<code>.toJSON</code>，<code>toNumber</code>。</p><p>js 的隐式类型转换用一次坑一次。</p><h3 id="相等比较" tabindex="-1"><a class="header-anchor" href="#相等比较" aria-hidden="true">#</a> 相等比较</h3><p>在 js 中，务必使用 <code>===</code> 三个等于号来比较对象，或者自定义方法来比较，不要使用 <code>==</code>。</p><p>我最近做一个项目，从数据库中取出的数据，虽然应该是字符型的，但有时它们是 String 的表示，有时是 Number 的表示。为了省事，会有人直接用 <code>==</code> 来对它们进行比较。这种时候，建议在比较时，把它们都转成 String 类型，然后用 <code>===</code> 来比较。</p><p>比如 <code>let x = 31243; let y = &#39;31243&#39;</code>，比较时，这么做：<code>String(x) === String(y)</code></p><h3 id="嵌套类型" tabindex="-1"><a class="header-anchor" href="#嵌套类型" aria-hidden="true">#</a> 嵌套类型</h3><p>随便弄。</p><p>function 构造函数、闭包、字面量哈希，都可以混在一起写，多少层都行，无限制。</p><h3 id="拓展" tabindex="-1"><a class="header-anchor" href="#拓展" aria-hidden="true">#</a> 拓展</h3><p>当无法接触一个类的源码，又想帮这个类新增方法的时候。操作它的 prototype 就好了。但不推荐！</p><h3 id="函数式编程" tabindex="-1"><a class="header-anchor" href="#函数式编程" aria-hidden="true">#</a> 函数式编程</h3><p>js 中，匿名函数非常的方便，有效利用函数式编程的特性可以使人写代码时心情愉悦。</p>',16),m={href:"https://lodash.com/docs",target:"_blank",rel:"noopener noreferrer"},v=(0,e.uE)('<h3 id="泛型" tabindex="-1"><a class="header-anchor" href="#泛型" aria-hidden="true">#</a> 泛型</h3><p>类型都经常忽略还泛型！every parammeter is 泛型 in js</p><h3 id="权限控制" tabindex="-1"><a class="header-anchor" href="#权限控制" aria-hidden="true">#</a> 权限控制</h3><p>类定义中，没有 public private 等关键词，都靠约定。而且经常有人突破约定。</p><p>有些 http 方面的库，时不时就去 stub 原生 http 库的方法，0.11 时的 node.js 完全不按章法出牌，所以很多这些库都出现兼容性问题。</p><h3 id="设计模式" tabindex="-1"><a class="header-anchor" href="#设计模式" aria-hidden="true">#</a> 设计模式</h3><p>《解密设计模式-王垠》</p>',7),b={href:"https://github.com/alsotang/node-lessons/blob/master/lesson14/%E8%A7%A3%E5%AF%86%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%8E%8B%E5%9E%A0.md",target:"_blank",rel:"noopener noreferrer"},g=(0,e.uE)('<h3 id="构建大型项目" tabindex="-1"><a class="header-anchor" href="#构建大型项目" aria-hidden="true">#</a> 构建大型项目</h3><p>从 npm 上面寻找质量高的库，并用质量高的方式拼凑起来。</p><h2 id="设计模式-1" tabindex="-1"><a class="header-anchor" href="#设计模式-1" aria-hidden="true">#</a> 设计模式</h2><p>有些人问我，你说学习操作系统的最好办法是学习程序设计。那我们是不是应该学习一些“设计模式”（design patterns）。这是一个我很早就有定论，而且经过实践检验的问题，所以想在这里做一个总结。</p><p>总的来说，如果光从字面上讲，程序里总是有一些“模式”可以发掘的。因为你总是可以借鉴以前的经验，来构造新的程序。你可以把这种“经验”叫做“模式”。可是自从《设计模式》（通常叫做 GoF，“Gang of Four”）这本书在 1994 年发表以来，“设计模式”这个词有了新的，扭曲的含义。它变成了一种教条，带来了公司里程序的严重复杂化。</p><p>GoF 借鉴的是一个叫 Christopher Alexander 的建筑师的做法。Alexander 给一些建筑学里的“设计模式”起了名字，试图让建筑师们有一些“共同语言”。可惜的是，Alexander 后来自己都承认，他的实验失败了。因为这些固定的模式，并没有有效地传递精髓的知识，没有能让新手设计出好的建筑。照搬模式东拼西凑，而不能看透事物的本质，其实是设计不出好东西的。</p><p>当我听说这本书的时候，我已经学会了函数式编程，正在 Cornell 读 PhD，专攻程序语言设计。有一天由于好奇这书为什么名气这么大，我从图书馆借了一本回来看。我很快的发现，其实这本书的作者只是给早已经存在的编程方法起了一些新的名字而已。当时我就拿起一张纸，把所有的 20 来个设计模式跟我常用的编程概念做了一个映射。这个映射居然是“多对一”（many-to-one）的。也就是说，多个 GoF 设计模式，居然只对应同一个我每天都用的概念。有些概念是如此的不值一提，以至于我根本不需要一个名字来描述它，更不要说多个名字！</p><p>其中极少数值得一提的“模式”，也许是 visitor 和 interpreter。很可惜的是，只有很少的人明白如何使用它们。所谓的 visitor，其实本质上就是函数式语言里的含有“模式匹配”（pattern matching）的递归函数。在函数式语言里，这是多么轻松的事情。可是因为 Java 没有模式匹配，所以很多人使用 visitor pattern。为了所谓的“通用性”，他们往往把 visitor pattern 搞出多层继承关系，让你转几道弯也搞不清楚到底哪个 visitor 才是干实事的。</p><p>其实，函数式语言的研究者们早就知道 visitor pattern 是怎么得来的。如果你想知道如何从无到有，“发明”出 Java 的 visitor pattern，可以参考 Dan Friedman 跟他的学生 Matthias Felleisen 合写的的另一本“小人书”《A Little Java, A Few Patterns》（发表于 1997 年）。</p><p>而 interpreter （解释器）模式呢？看了作者们写的例子程序之后，我发现他们其实并不会写解释器，或者说他们不知道如何写出优雅的，正确的解释器。如果你想知道如何写出好的解释器，可以参考我的博文《怎样写一个解释器》。</p><p>你说我在贬低这本书的真正价值，因为 GoF 说了：“我们的贡献，就是给这些编程方式起名字。这样让广大程序员有共同的语言。” 如果这也叫贡献的话，我就可以写本书，给“空气”，“水”，“猪肉”这些东西全都起个新名字，让大家有“共同的语言”。这不是搞笑吗。</p><p>这不是我的一家之言，Peter Norvig 在 1998 年就做了一个演讲，指出在“动态语言”里面，GoF 的 20 几个模式，其中绝大部分都“透明”了。也就是说，你根本感觉不到它们的存在。这就像我刚才告诉你的。</p><p>在这里 Norvig 的观点是正确的，不过需要小心一个概念错误。高级的“静态语言”（能传递函数作为参数的），其实也可以避免大部分 GoF 设计模式。而“动态语言”这个概念，在程序语言的理论里面，其实是没有明确的定义的。“动态语言”其实也能进行某些“静态类型检查”。不过在 1998 年，我还是个啥都不懂屁孩，所以这里就不跟 Norvig 大叔计较了。</p><p>既然老人们都有历史局限性，那么为啥我还跟 GoF 找茬？本来这本书很老了，如果没有人再被它误导的话，这篇博文也就不必存在了。可是当我在 Google 实习的时候，我发现几乎每个程序员的书架上都有一本 GoF！我在 Google 实习了两次，第一次的时候代码全都是我一个人写的，所以没有使用任何 GoF 设计模式。代码直接，精巧而简单。当我第二次回到 Google，发现我的代码里已经被加入了各种 factory，visitor，…… 其实啥好事也没做，只不过让我的代码弯了几道弯，让人难以理解。</p><p>可见一本坏书，毁掉的不只是一代程序员。鉴于如此，特发此文。各位新手，希望你们敲响警钟，不要再走上这条老路，写出代码来让大家痛苦。</p><p>至于如何学会写真正好的代码，我在另一篇博文里再讲。</p>',16),f={},j=(0,s(8580).Z)(f,[["render",function(n,a){const s=(0,e.up)("ExternalLinkIcon");return(0,e.wg)(),(0,e.iD)("div",null,[t,o,p,l,(0,e._)("p",null,[(0,e._)("a",i,[(0,e.Uk)("http://book.douban.com/subject/3590768/"),(0,e.Wm)(s)])]),c,(0,e._)("ul",null,[(0,e._)("li",null,[(0,e.Uk)("《使用 eventproxy 控制并发》："),(0,e._)("a",r,[(0,e.Uk)("https://github.com/alsotang/node-lessons/tree/master/lesson4"),(0,e.Wm)(s)])]),(0,e._)("li",null,[(0,e.Uk)("《使用 async 控制并发》："),(0,e._)("a",d,[(0,e.Uk)("https://github.com/alsotang/node-lessons/tree/master/lesson5"),(0,e.Wm)(s)])])]),u,(0,e._)("p",null,[(0,e.Uk)("koa("),(0,e._)("a",h,[(0,e.Uk)("http://koajs.com/"),(0,e.Wm)(s)]),(0,e.Uk)(" ) 把这套玩得炉火纯青。")]),k,(0,e._)("p",null,[(0,e.Uk)("使用 lodash："),(0,e._)("a",m,[(0,e.Uk)("https://lodash.com/docs"),(0,e.Wm)(s)])]),v,(0,e._)("p",null,[(0,e._)("a",b,[(0,e.Uk)("https://github.com/alsotang/node-lessons/blob/master/lesson14/解密设计模式-王垠.md"),(0,e.Wm)(s)])]),g])}]])},8580:(n,a)=>{a.Z=(n,a)=>{const s=n.__vccOpts||n;for(const[n,e]of a)s[n]=e;return s}}}]);