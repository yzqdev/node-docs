"use strict";(self.webpackChunknode_docs=self.webpackChunknode_docs||[]).push([[4978],{3499:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e=JSON.parse('{"key":"v-73d28f86","path":"/nodejs/01_getting_started.html","title":"NodeJS基础","lang":"zh-CN","frontmatter":{"index":1,"description":"什么是NodeJS JS是脚本语言，脚本语言都需要一个解析器才能运行。对于写在HTML页面里的JS，浏览器充当了解析器的角色。而对于需要独立运行的JS，NodeJS就是一个解析器。 每一种解析器都是一个运行环境，不但允许JS定义各种数据结构，进行各种计算，还允许JS使用运行环境提供的内置对象和方法做一些事情。例如运行在浏览器中的JS的用途是操作DOM，...","head":[["meta",{"property":"og:url","content":"https://yzqdev.github.io/node-docs/node-docs/nodejs/01_getting_started.html"}],["meta",{"property":"og:site_name","content":"node-docs"}],["meta",{"property":"og:title","content":"NodeJS基础"}],["meta",{"property":"og:description","content":"什么是NodeJS JS是脚本语言，脚本语言都需要一个解析器才能运行。对于写在HTML页面里的JS，浏览器充当了解析器的角色。而对于需要独立运行的JS，NodeJS就是一个解析器。 每一种解析器都是一个运行环境，不但允许JS定义各种数据结构，进行各种计算，还允许JS使用运行环境提供的内置对象和方法做一些事情。例如运行在浏览器中的JS的用途是操作DOM，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-03-26T15:48:25.000Z"}],["meta",{"property":"article:modified_time","content":"2022-03-26T15:48:25.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"NodeJS基础\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2022-03-26T15:48:25.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"什么是NodeJS","slug":"什么是nodejs","link":"#什么是nodejs","children":[]},{"level":2,"title":"有啥用处","slug":"有啥用处","link":"#有啥用处","children":[]},{"level":2,"title":"如何安装","slug":"如何安装","link":"#如何安装","children":[{"level":3,"title":"安装程序","slug":"安装程序","link":"#安装程序","children":[]},{"level":3,"title":"编译安装","slug":"编译安装","link":"#编译安装","children":[]}]},{"level":2,"title":"如何运行","slug":"如何运行","link":"#如何运行","children":[{"level":3,"title":"权限问题","slug":"权限问题","link":"#权限问题","children":[]}]},{"level":2,"title":"模块","slug":"模块","link":"#模块","children":[{"level":3,"title":"require","slug":"require","link":"#require","children":[]},{"level":3,"title":"exports","slug":"exports","link":"#exports","children":[]},{"level":3,"title":"module","slug":"module","link":"#module","children":[]},{"level":3,"title":"模块初始化","slug":"模块初始化","link":"#模块初始化","children":[]},{"level":3,"title":"主模块","slug":"主模块","link":"#主模块","children":[]},{"level":3,"title":"完整示例","slug":"完整示例","link":"#完整示例","children":[]}]},{"level":2,"title":"二进制模块","slug":"二进制模块","link":"#二进制模块","children":[]},{"level":2,"title":"小结","slug":"小结","link":"#小结","children":[]}],"git":{"createdTime":1648054750000,"updatedTime":1648309705000,"contributors":[{"name":"yzqdev","email":"yzqdev@outlook.com","commits":3}]},"readingTime":{"minutes":6.95,"words":2086},"filePathRelative":"nodejs/01_getting_started.md","localizedDate":"2022年3月23日","autoDesc":true,"excerpt":""}')},9100:(n,s,a)=>{a.r(s),a.d(s,{default:()=>f});var e=a(6808);const o=(0,e.uE)('<h1 id="nodejs基础" tabindex="-1"><a class="header-anchor" href="#nodejs基础" aria-hidden="true">#</a> NodeJS基础</h1><hr><h2 id="什么是nodejs" tabindex="-1"><a class="header-anchor" href="#什么是nodejs" aria-hidden="true">#</a> 什么是NodeJS</h2><p>JS是脚本语言，脚本语言都需要一个解析器才能运行。对于写在HTML页面里的JS，浏览器充当了解析器的角色。而对于需要独立运行的JS，NodeJS就是一个解析器。</p><p>每一种解析器都是一个运行环境，不但允许JS定义各种数据结构，进行各种计算，还允许JS使用运行环境提供的内置对象和方法做一些事情。例如运行在浏览器中的JS的用途是操作DOM，浏览器就提供了<code>document</code>之类的内置对象。而运行在NodeJS中的JS的用途是操作磁盘文件或搭建HTTP服务器，NodeJS就相应提供了<code>fs</code>、<code>http</code>等内置对象。</p><h2 id="有啥用处" tabindex="-1"><a class="header-anchor" href="#有啥用处" aria-hidden="true">#</a> 有啥用处</h2><p>尽管存在一听说可以直接运行JS文件就觉得很酷的同学，但大多数同学在接触新东西时首先关心的是有啥用处，以及能带来啥价值。</p><p>NodeJS的作者说，他创造NodeJS的目的是为了实现高性能Web服务器，他首先看重的是事件机制和异步IO模型的优越性，而不是JS。但是他需要选择一种编程语言实现他的想法，这种编程语言不能自带IO功能，并且需要能良好支持事件机制。JS没有自带IO功能，天生就用于处理浏览器中的DOM事件，并且拥有一大群程序员，因此就成为了天然的选择。</p><p>如他所愿，NodeJS在服务端活跃起来，出现了大批基于NodeJS的Web服务。而另一方面，NodeJS让前端众如获神器，终于可以让自己的能力覆盖范围跳出浏览器窗口，更大批的前端工具如雨后春笋。</p><p>因此，对于前端而言，虽然不是人人都要拿NodeJS写一个服务器程序，但简单可至使用命令交互模式调试JS代码片段，复杂可至编写工具提升工作效率。</p><p>NodeJS生态圈正欣欣向荣。</p><h2 id="如何安装" tabindex="-1"><a class="header-anchor" href="#如何安装" aria-hidden="true">#</a> 如何安装</h2><h3 id="安装程序" tabindex="-1"><a class="header-anchor" href="#安装程序" aria-hidden="true">#</a> 安装程序</h3>',13),t={href:"http://nodejs.org/download/",target:"_blank",rel:"noopener noreferrer"},l=(0,e._)("p",null,[(0,e.Uk)("Windows系统下，选择和系统版本匹配的"),(0,e._)("code",null,".msi"),(0,e.Uk)("后缀的安装文件。Mac OS X系统下，选择"),(0,e._)("code",null,".pkg"),(0,e.Uk)("后缀的安装文件。")],-1),i=(0,e._)("h3",{id:"编译安装",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#编译安装","aria-hidden":"true"},"#"),(0,e.Uk)(" 编译安装")],-1),c=(0,e._)("p",null,[(0,e.Uk)("Linux系统下没有现成的安装程序可用，虽然一些发行版可以使用"),(0,e._)("code",null,"apt-get"),(0,e.Uk)("之类的方式安装，但不一定能安装到最新版。因此Linux系统下一般使用以下方式编译方式安装NodeJS。")],-1),p=(0,e._)("li",null,[(0,e._)("p",null,"确保系统下g++版本在4.6以上，python版本在2.6以上。")],-1),d={href:"http://nodejs.org/download/",target:"_blank",rel:"noopener noreferrer"},u=(0,e._)("code",null,"tar.gz",-1),r=(0,e._)("li",null,[(0,e._)("p",null,"进入解压到的目录，使用以下命令编译和安装。")],-1),k=(0,e.uE)('<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>  ./configure\n  <span class="token function">make</span>\n  <span class="token function">sudo</span> <span class="token function">make</span> <span class="token function">install</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="如何运行" tabindex="-1"><a class="header-anchor" href="#如何运行" aria-hidden="true">#</a> 如何运行</h2><p>打开终端，键入<code>node</code>进入命令交互模式，可以输入一条代码语句后立即执行并显示结果，例如：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> $ <span class="token function">node</span>\n <span class="token operator">&gt;</span> console.log<span class="token punctuation">(</span><span class="token string">&#39;Hello World!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n Hello World<span class="token operator">!</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果要运行一大段代码的话，可以先写一个JS文件再运行。例如有以下<code>hello.js</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code> <span class="token keyword">function</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Hello World!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n <span class="token punctuation">}</span>\n <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>写好后在终端下键入<code>node hello.js</code>运行，结果如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> <span class="token function">node</span> hello.js\n Hello World<span class="token operator">!</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="权限问题" tabindex="-1"><a class="header-anchor" href="#权限问题" aria-hidden="true">#</a> 权限问题</h3><p>在Linux系统下，使用NodeJS监听80或443端口提供HTTP(S)服务时需要root权限，有两种方式可以做到。</p><p>一种方式是使用<code>sudo</code>命令运行NodeJS。例如通过以下命令运行的<code>server.js</code>中有权限使用80和443端口。一般推荐这种方式，可以保证仅为有需要的JS脚本提供root权限。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> <span class="token function">sudo</span> <span class="token function">node</span> server.js\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>另一种方式是使用<code>chmod +s</code>命令让NodeJS总是以root权限运行，具体做法如下。因为这种方式让任何JS脚本都有了root权限，不太安全，因此在需要很考虑安全的系统下不推荐使用。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> <span class="token function">sudo</span> <span class="token function">chown</span> root /usr/local/bin/node\n <span class="token function">sudo</span> <span class="token function">chmod</span> +s /usr/local/bin/node\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="模块" tabindex="-1"><a class="header-anchor" href="#模块" aria-hidden="true">#</a> 模块</h2><p>编写稍大一点的程序时一般都会将代码模块化。在NodeJS中，一般将代码合理拆分到不同的JS文件中，每一个文件就是一个模块，而文件路径就是模块名。</p><p>在编写每个模块时，都有<code>require</code>、<code>exports</code>、<code>module</code>三个预先定义好的变量可供使用。</p><h3 id="require" tabindex="-1"><a class="header-anchor" href="#require" aria-hidden="true">#</a> require</h3><p><code>require</code>函数用于在当前模块中加载和使用别的模块，传入一个模块名，返回一个模块导出对象。模块名可使用相对路径（以<code>./</code>开头），或者是绝对路径（以<code>/</code>或<code>C:</code>之类的盘符开头）。另外，模块名中的<code>.js</code>扩展名可以省略。以下是一个例子。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> <span class="token builtin class-name">let</span> foo1 <span class="token operator">=</span> require<span class="token punctuation">(</span><span class="token string">&#39;./foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n <span class="token builtin class-name">let</span> foo2 <span class="token operator">=</span> require<span class="token punctuation">(</span><span class="token string">&#39;./foo.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n <span class="token builtin class-name">let</span> foo3 <span class="token operator">=</span> require<span class="token punctuation">(</span><span class="token string">&#39;/home/user/foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n <span class="token builtin class-name">let</span> foo4 <span class="token operator">=</span> require<span class="token punctuation">(</span><span class="token string">&#39;/home/user/foo.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>// foo1至foo4中保存的是同一个模块的导出对象。</p><p>另外，可以使用以下方式加载和使用一个JSON文件。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code> <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./data.json&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="exports" tabindex="-1"><a class="header-anchor" href="#exports" aria-hidden="true">#</a> exports</h3><p><code>exports</code>对象是当前模块的导出对象，用于导出模块公有方法和属性。别的模块通过<code>require</code>函数使用当前模块时得到的就是当前模块的<code>exports</code>对象。以下例子中导出了一个公有方法。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code> exports<span class="token punctuation">.</span><span class="token function-variable function">hello</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Hello World!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n <span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="module" tabindex="-1"><a class="header-anchor" href="#module" aria-hidden="true">#</a> module</h3><p>通过<code>module</code>对象可以访问到当前模块的一些相关信息，但最多的用途是替换当前模块的导出对象。例如模块导出对象默认是一个普通对象，如果想改成一个函数的话，可以使用以下方式。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code> module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Hello World!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n <span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上代码中，模块默认导出对象被替换为一个函数。</p><h3 id="模块初始化" tabindex="-1"><a class="header-anchor" href="#模块初始化" aria-hidden="true">#</a> 模块初始化</h3><p>一个模块中的JS代码仅在模块第一次被使用时执行一次，并在执行过程中初始化模块的导出对象。之后，缓存起来的导出对象被重复利用。</p><h3 id="主模块" tabindex="-1"><a class="header-anchor" href="#主模块" aria-hidden="true">#</a> 主模块</h3><p>通过命令行参数传递给NodeJS以启动程序的模块被称为主模块。主模块负责调度组成整个程序的其它模块完成工作。例如通过以下命令启动程序时，<code>main.js</code>就是主模块。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> <span class="token function">node</span> main.js\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="完整示例" tabindex="-1"><a class="header-anchor" href="#完整示例" aria-hidden="true">#</a> 完整示例</h3><p>例如有以下目录。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>- /home/user/hello/\n- util/\n   counter.js\n  main.js\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中<code>counter.js</code>内容如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code> <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n\n <span class="token keyword">function</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token operator">++</span>i<span class="token punctuation">;</span>\n <span class="token punctuation">}</span>\n\n exports<span class="token punctuation">.</span>count <span class="token operator">=</span> count<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该模块内部定义了一个私有变量<code>i</code>，并在<code>exports</code>对象导出了一个公有方法<code>count</code>。</p><p>主模块<code>main.js</code>内容如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code> <span class="token keyword">let</span> counter1 <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./util/counter&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n <span class="token keyword">let</span> counter2 <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./util/counter&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>counter1<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>counter2<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>counter2<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行该程序的结果如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> $ <span class="token function">node</span> main.js\n <span class="token number">1</span>\n <span class="token number">2</span>\n <span class="token number">3</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，<code>counter.js</code>并没有因为被require了两次而初始化两次。</p><h2 id="二进制模块" tabindex="-1"><a class="header-anchor" href="#二进制模块" aria-hidden="true">#</a> 二进制模块</h2><p>虽然一般我们使用JS编写模块，但NodeJS也支持使用C/C++编写二进制模块。编译好的二进制模块除了文件扩展名是<code>.node</code>外，和JS模块的使用方式相同。虽然二进制模块能使用操作系统提供的所有功能，拥有无限的潜能，但对于前端同学而言编写过于困难，并且难以跨平台使用，因此不在本教程的覆盖范围内。</p><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><p>本章介绍了有关NodeJS的基本概念和使用方法，总结起来有以下知识点：</p>',50),v=(0,e._)("li",null,[(0,e._)("p",null,[(0,e.Uk)("NodeJS是一个JS脚本解析器，任何操作系统下安装NodeJS本质上做的事情都是把NodeJS执行程序复制到一个目录，然后保证这个目录在系统PATH环境变量下，以便终端下可以使用"),(0,e._)("code",null,"node"),(0,e.Uk)("命令。")])],-1),h=(0,e._)("li",null,[(0,e._)("p",null,[(0,e.Uk)("终端下直接输入"),(0,e._)("code",null,"node"),(0,e.Uk)("命令可进入命令交互模式，很适合用来测试一些JS代码片段，比如正则表达式。")])],-1),m={href:"http://wiki.commonjs.org/",target:"_blank",rel:"noopener noreferrer"},b=(0,e._)("li",null,[(0,e._)("p",null,"除非JS模块不能满足需求，否则不要轻易使用二进制模块，否则你的用户会叫苦连天。")],-1),g={},f=(0,a(8580).Z)(g,[["render",function(n,s){const a=(0,e.up)("ExternalLinkIcon");return(0,e.wg)(),(0,e.iD)("div",null,[o,(0,e._)("p",null,[(0,e.Uk)("NodeJS提供了一些安装程序，都可以在"),(0,e._)("a",t,[(0,e.Uk)("nodejs.org"),(0,e.Wm)(a)]),(0,e.Uk)("这里下载并安装。")]),l,i,c,(0,e._)("ol",null,[p,(0,e._)("li",null,[(0,e._)("p",null,[(0,e.Uk)("从"),(0,e._)("a",d,[(0,e.Uk)("nodejs.org"),(0,e.Wm)(a)]),(0,e.Uk)("下载"),u,(0,e.Uk)("后缀的NodeJS最新版源代码包并解压到某个位置。")])]),r]),k,(0,e._)("ul",null,[v,h,(0,e._)("li",null,[(0,e._)("p",null,[(0,e.Uk)("NodeJS使用"),(0,e._)("a",m,[(0,e.Uk)("CMD"),(0,e.Wm)(a)]),(0,e.Uk)("模块系统，主模块作为程序入口点，所有模块在执行过程中只初始化一次。")])]),b])])}]])},8580:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,e]of s)a[n]=e;return a}}}]);