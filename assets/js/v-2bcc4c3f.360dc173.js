"use strict";(self.webpackChunknode_docs=self.webpackChunknode_docs||[]).push([[3257],{4918:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t=JSON.parse('{"key":"v-2bcc4c3f","path":"/node-lessons/lesson8.html","title":"8.浏览器端测试：mocha，chai，phantomjs","lang":"zh-CN","frontmatter":{"order":8,"description":"目标 建立一个 lesson7 项目，在其中编写代码，我们暂时命名为 vendor 根据下面的步骤，最终的项目结构应该长这样 (https://github.com/alsotang/node-lessons/tree/master/lesson7/vendor) 这次我们测试的对象是上文提到的 fibonacci 函数 此函数的定义为 int fib...","head":[["meta",{"property":"og:url","content":"https://yzqdev.github.io/node-docs/node-docs/node-lessons/lesson8.html"}],["meta",{"property":"og:site_name","content":"node-docs"}],["meta",{"property":"og:title","content":"8.浏览器端测试：mocha，chai，phantomjs"}],["meta",{"property":"og:description","content":"目标 建立一个 lesson7 项目，在其中编写代码，我们暂时命名为 vendor 根据下面的步骤，最终的项目结构应该长这样 (https://github.com/alsotang/node-lessons/tree/master/lesson7/vendor) 这次我们测试的对象是上文提到的 fibonacci 函数 此函数的定义为 int fib..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-03-26T15:48:25.000Z"}],["meta",{"property":"article:modified_time","content":"2022-03-26T15:48:25.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"8.浏览器端测试：mocha，chai，phantomjs\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2022-03-26T15:48:25.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"目标","slug":"目标","link":"#目标","children":[]},{"level":2,"title":"知识点","slug":"知识点","link":"#知识点","children":[{"level":3,"title":"前端脚本单元测试","slug":"前端脚本单元测试","link":"#前端脚本单元测试","children":[]}]}],"git":{"createdTime":1648309705000,"updatedTime":1648309705000,"contributors":[{"name":"yzqdev","email":"yzqdev@outlook.com","commits":1}]},"readingTime":{"minutes":3.1,"words":930},"filePathRelative":"node-lessons/lesson8.md","localizedDate":"2022年3月26日","autoDesc":true,"excerpt":""}')},4511:(n,s,a)=>{a.r(s),a.d(s,{default:()=>v});var t=a(6808);const e=(0,t._)("h1",{id:"_8-浏览器端测试-mocha-chai-phantomjs",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#_8-浏览器端测试-mocha-chai-phantomjs","aria-hidden":"true"},"#"),(0,t.Uk)(" 8.浏览器端测试：mocha，chai，phantomjs")],-1),p=(0,t._)("h2",{id:"目标",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#目标","aria-hidden":"true"},"#"),(0,t.Uk)(" 目标")],-1),o=(0,t._)("em",null,"vendor",-1),c={href:"https://github.com/alsotang/node-lessons/tree/master/lesson7/vendor",target:"_blank",rel:"noopener noreferrer"},i=(0,t.uE)('<p>这次我们测试的对象是上文提到的 fibonacci 函数</p><p>此函数的定义为 <code>int fibonacci(int n)</code></p><ul><li>当 n === 0 时，返回 0；n === 1时，返回 1;</li><li>n &gt; 1 时，返回 <code>fibonacci(n) === fibonacci(n-1) + fibonacci(n-2)</code>，如 <code>fibonacci(10) === 55</code>;</li></ul><h2 id="知识点" tabindex="-1"><a class="header-anchor" href="#知识点" aria-hidden="true">#</a> 知识点</h2>',4),l={href:"http://mochajs.org/",target:"_blank",rel:"noopener noreferrer"},u={href:"http://chaijs.com/",target:"_blank",rel:"noopener noreferrer"},r={href:"http://phantomjs.org/",target:"_blank",rel:"noopener noreferrer"},d=(0,t._)("h3",{id:"前端脚本单元测试",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#前端脚本单元测试","aria-hidden":"true"},"#"),(0,t.Uk)(" 前端脚本单元测试")],-1),k={href:"https://github.com/alsotang/node-lessons/tree/master/lesson6",target:"_blank",rel:"noopener noreferrer"},m=(0,t.uE)('<p>首先，前端脚本的单元测试主要有两个困难需要解决。</p><ol><li><p>运行环境应当在浏览器中，可以操纵浏览器的DOM对象，且可以随意定义执行时的 html 上下文。</p></li><li><p>测试结果应当可以直接反馈给 mocha，判断测试是否通过。</p></li></ol><h4 id="浏览器环境执行" tabindex="-1"><a class="header-anchor" href="#浏览器环境执行" aria-hidden="true">#</a> 浏览器环境执行</h4><p>我们首先搭建一个测试原型，用 mocha 自带的脚手架可以自动生成。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> vendor            <span class="token comment"># 进入我们的项目文件夹</span>\n<span class="token function">npm</span> i <span class="token parameter variable">-g</span> mocha       <span class="token comment"># 安装全局的 mocha 命令行工具</span>\nmocha init <span class="token builtin class-name">.</span>         <span class="token comment"># 生成脚手架</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>mocha就会自动帮我们生成一个简单的测试原型, 目录结构如下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">.</span>\n├── index.html       <span class="token comment"># 这是前端单元测试的入口</span>\n├── mocha.css\n├── mocha.js\n└── tests.js         <span class="token comment"># 我们的单元测试代码将在这里编写</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中 index.html 是单元测试的入口，tests.js 是我们的测试用例文件。</p><p>我们直接在 index.html 插入上述示例的 fibonacci 函数以及断言库 chaijs。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>mocha<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>https://cdn.rawgit.com/chaijs/chai/master/chai.js<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n  <span class="token keyword">let</span> <span class="token function-variable function">fibonacci</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在tests.js中写入对应测试用例</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> should <span class="token operator">=</span> chai<span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">&#39;simple test&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;should equal 0 when n === 0&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    window<span class="token punctuation">.</span><span class="token function">fibonacci</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>should<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这时打开index.html，可以发现测试结果，我们完成了浏览器端的脚本测试(注意我们调用了 <strong>window</strong> 对象)</p><p><img src="https://raw.githubusercontent.com/alsotang/node-lessons/master/lesson7/1.png" alt=""></p><h4 id="测试反馈" tabindex="-1"><a class="header-anchor" href="#测试反馈" aria-hidden="true">#</a> 测试反馈</h4><p>mocha没有提供一个命令行的前端脚本测试环境(因为我们的脚本文件需要运行在浏览器环境中)，因此我们使用phantomjs帮助我们搭建一个模拟环境。不重复制造轮子，这里直接使用mocha-phantomjs帮助我们在命令行运行测试。</p><p>首先安装mocha-phantomjs</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i <span class="token parameter variable">-g</span> mocha-phantomjs\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后在 index.html 的页面下加上这段兼容代码</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">mocha<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>改为</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>initMochaPhantomJS <span class="token operator">&amp;&amp;</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>search<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;skip&#39;</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">initMochaPhantomJS</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  mocha<span class="token punctuation">.</span><span class="token function">ui</span><span class="token punctuation">(</span><span class="token string">&#39;bdd&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  expect <span class="token operator">=</span> chai<span class="token punctuation">.</span>expect<span class="token punctuation">;</span>\n  \n  mocha<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这时候, 我们在命令行中运行</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mocha-phantomjs index.html --ssl-protocol<span class="token operator">=</span>any --ignore-ssl-errors<span class="token operator">=</span>true\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>结果展现是不是和后端代码测试很类似 😄</p><p>更进一步，我们可以直接在 package.json 的 scripts 中添加 (package.json 通过 <code>npm init</code> 生成，这里不再赘述)</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n  <span class="token property">&quot;test&quot;</span><span class="token operator">:</span> <span class="token string">&quot;mocha-phantomjs index.html --ssl-protocol=any --ignore-ssl-errors=true&quot;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将mocha-phantomjs作为依赖</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i mocha-phantomjs --save-dev\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>直接运行</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token builtin class-name">test</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>运行结果如下:</p><p>至此,我们实现了前端脚本的单元测试，基于 phanatomjs 你几乎可以调用所有的浏览器方法，而 mocha-phanatomjs 也可以很便捷地将测试结果反馈到 mocha，便于后续的持续集成。</p>',33),h={},v=(0,a(8580).Z)(h,[["render",function(n,s){const a=(0,t.up)("ExternalLinkIcon");return(0,t.wg)(),(0,t.iD)("div",null,[e,p,(0,t._)("p",null,[(0,t.Uk)("建立一个 lesson7 项目，在其中编写代码，我们暂时命名为 "),o,(0,t.Uk)(" 根据下面的步骤，最终的项目结构应该长"),(0,t._)("a",c,[(0,t.Uk)("这样"),(0,t.Wm)(a)])]),i,(0,t._)("ol",null,[(0,t._)("li",null,[(0,t.Uk)("学习使用测试框架 mocha 进行前端测试 : "),(0,t._)("a",l,[(0,t.Uk)("http://mochajs.org/"),(0,t.Wm)(a)])]),(0,t._)("li",null,[(0,t.Uk)("了解全栈的断言库 chai: "),(0,t._)("a",u,[(0,t.Uk)("http://chaijs.com/"),(0,t.Wm)(a)])]),(0,t._)("li",null,[(0,t.Uk)("了解 headless 浏览器 phantomjs: "),(0,t._)("a",r,[(0,t.Uk)("http://phantomjs.org/"),(0,t.Wm)(a)])])]),d,(0,t._)("p",null,[(0,t._)("a",k,[(0,t.Uk)("lesson6"),(0,t.Wm)(a)]),(0,t.Uk)(" 的内容都是针对后端环境中 node 的一些单元测试方案，出于应用健壮性的考量，针对前端 js 脚本的单元测试也非常重要。而前后端通吃，也是 mocha 的一大特点。")]),m])}]])},8580:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,t]of s)a[n]=t;return a}}}]);