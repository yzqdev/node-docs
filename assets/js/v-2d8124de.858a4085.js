"use strict";(self.webpackChunknode_docs=self.webpackChunknode_docs||[]).push([[1732],{7172:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t=JSON.parse('{"key":"v-2d8124de","path":"/node-lessons/lesson9.html","title":"9.测试用例：supertest","lang":"zh-CN","frontmatter":{"order":9,"description":"目标 建立一个 lesson8 项目，在其中编写代码。 app.js: 其中有个 fibonacci 接口。fibonacci 的介绍见： 。 fibonacci 函数的定义为 int fibonacci(int n)，调用函数的路径是 \'/fib?n=10\'，然后这个接口会返回 \'55\'。函数的行为定义如下： 当 n === 0 时，返回 0；n =...","head":[["meta",{"property":"og:url","content":"https://yzqdev.github.io/node-docs/node-docs/node-lessons/lesson9.html"}],["meta",{"property":"og:site_name","content":"node-docs"}],["meta",{"property":"og:title","content":"9.测试用例：supertest"}],["meta",{"property":"og:description","content":"目标 建立一个 lesson8 项目，在其中编写代码。 app.js: 其中有个 fibonacci 接口。fibonacci 的介绍见： 。 fibonacci 函数的定义为 int fibonacci(int n)，调用函数的路径是 \'/fib?n=10\'，然后这个接口会返回 \'55\'。函数的行为定义如下： 当 n === 0 时，返回 0；n =..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-03-26T15:48:25.000Z"}],["meta",{"property":"article:modified_time","content":"2022-03-26T15:48:25.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"9.测试用例：supertest\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2022-03-26T15:48:25.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"目标","slug":"目标","link":"#目标","children":[]},{"level":2,"title":"知识点","slug":"知识点","link":"#知识点","children":[]},{"level":2,"title":"课程内容","slug":"课程内容","link":"#课程内容","children":[]},{"level":2,"title":"关于 cookie 持久化","slug":"关于-cookie-持久化","link":"#关于-cookie-持久化","children":[]},{"level":2,"title":"拓展学习","slug":"拓展学习","link":"#拓展学习","children":[]}],"git":{"createdTime":1648309705000,"updatedTime":1648309705000,"contributors":[{"name":"yzqdev","email":"yzqdev@outlook.com","commits":1}]},"readingTime":{"minutes":6.45,"words":1935},"filePathRelative":"node-lessons/lesson9.md","localizedDate":"2022年3月26日","autoDesc":true,"excerpt":""}')},6744:(n,s,a)=>{a.r(s),a.d(s,{default:()=>P});var t=a(6808);const p=(0,t._)("h1",{id:"_9-测试用例-supertest",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#_9-测试用例-supertest","aria-hidden":"true"},"#"),(0,t.Uk)(" 9.测试用例：supertest")],-1),e=(0,t._)("h2",{id:"目标",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#目标","aria-hidden":"true"},"#"),(0,t.Uk)(" 目标")],-1),o=(0,t._)("p",null,"建立一个 lesson8 项目，在其中编写代码。",-1),c={href:"http://en.wikipedia.org/wiki/Fibonacci_number",target:"_blank",rel:"noopener noreferrer"},i=(0,t.uE)('<p>fibonacci 函数的定义为 <code>int fibonacci(int n)</code>，调用函数的路径是 &#39;/fib?n=10&#39;，然后这个接口会返回 &#39;55&#39;。函数的行为定义如下：</p><ul><li>当 n === 0 时，返回 0；n === 1时，返回 1;</li><li>n &gt; 1 时，返回 <code>fibonacci(n) === fibonacci(n-1) + fibonacci(n-2)</code>，如 <code>fibonacci(10) === 55</code>;</li><li>n 不可大于10，否则抛错，http status 500，因为 Node.js 的计算性能没那么强。</li><li>n 也不可小于 0，否则抛错，500，因为没意义。</li><li>n 不为数字时，抛错，500。</li></ul><p>test/main.test.js: 对 app 的接口进行测试，覆盖以上所有情况。</p><h2 id="知识点" tabindex="-1"><a class="header-anchor" href="#知识点" aria-hidden="true">#</a> 知识点</h2>',4),l={href:"https://github.com/tj/supertest",target:"_blank",rel:"noopener noreferrer"},u=(0,t._)("li",null,"复习 mocha，should 的使用",-1),r=(0,t._)("h2",{id:"课程内容",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#课程内容","aria-hidden":"true"},"#"),(0,t.Uk)(" 课程内容")],-1),k=(0,t._)("p",null,"这是连续第三节课讲测试了..我自己都烦..看着烦的可以考虑跳下一课。",-1),d=(0,t._)("p",null,"OK，基础知识前面都讲得很多了，这节课我不会事无巨细地写过程了。",-1),m={href:"https://github.com/fengmk2",target:"_blank",rel:"noopener noreferrer"},v={href:"http://fengmk2.cnpmjs.org/blog/2011/fibonacci/nodejs-python-php-ruby-lua.html",target:"_blank",rel:"noopener noreferrer"},b={href:"https://github.com/tj",target:"_blank",rel:"noopener noreferrer"},h={href:"http://tour.golang.org/",target:"_blank",rel:"noopener noreferrer"},g=(0,t._)("p",null,"为什么说 supertest 是 superagent 的孪生库呢，因为他们的 API 是一模一样的。superagent 是用来抓取页面用的，而 supertest，是专门用来配合 express （准确来说是所有兼容 connect 的 web 框架）进行集成测试的。",-1),f=(0,t._)("code",null,"let app = express();",-1),y=(0,t._)("code",null,"let request = require('supertest')(app)",-1),w=(0,t._)("code",null,"requset.get('/path')",-1),_={href:"http://visionmedia.github.io/superagent/",target:"_blank",rel:"noopener noreferrer"},j=(0,t.uE)('<p>我们来新建一个项目</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> init <span class="token comment"># ..一阵乱填</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后安装我们的依赖（记得去弄清楚 <code>npm i --save</code> 与 <code>npm i --save-dev</code> 的区别）：</p><div class="language-jsson line-numbers-mode" data-ext="jsson"><pre class="language-jsson"><code>  &quot;devDependencies&quot;: {\n    &quot;mocha&quot;: &quot;^1.21.4&quot;,\n    &quot;should&quot;: &quot;^4.0.4&quot;,\n    &quot;supertest&quot;: &quot;^0.14.0&quot;\n  },\n  &quot;dependencies&quot;: {\n    &quot;express&quot;: &quot;^4.9.6&quot;\n  }\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着，编写 app.js</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> express <span class="token keyword">from</span> <span class="token string">&#39;express&#39;</span>\n\n<span class="token comment">// 与之前一样</span>\n<span class="token keyword">let</span> <span class="token function-variable function">fibonacci</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// typeof NaN === &#39;number&#39; 是成立的，所以要判断 NaN</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> n <span class="token operator">!==</span> <span class="token string">&#39;number&#39;</span> <span class="token operator">||</span> <span class="token function">isNaN</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;n should be a Number&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;n should &gt;= 0&#39;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;n should &lt;= 10&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token comment">// END 与之前一样</span>\n\n<span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\napp<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/fib&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// http 传来的东西默认都是没有类型的，都是 String，所以我们要手动转换类型</span>\n  <span class="token keyword">let</span> n <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">try</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 为何使用 String 做类型转换，是因为如果你直接给个数字给 res.send 的话，</span>\n    <span class="token comment">// 它会当成是你给了它一个 http 状态码，所以我们明确给 String</span>\n    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token function">fibonacci</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 如果 fibonacci 抛错的话，错误信息会记录在 err 对象的 .message 属性中。</span>\n    <span class="token comment">// 拓展阅读：https://www.joyent.com/developers/node/design/errors</span>\n    res\n      <span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 暴露 app 出去。module.exports 与 exports 的区别请看《深入浅出 Node.js》</span>\n \n\napp<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;app is listening at port 3000&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>好了，启动一下看看。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">node</span> app.js\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后访问 <code>http://localhost:3000/fib?n=10</code>，看到 55 就说明启动成功了。再访问 <code>http://localhost:3000/fib?n=111</code>，会看到 <code>n should &lt;= 10</code>。</p>',9),q=(0,t._)("code",null,"nodemon",-1),x={href:"https://github.com/remy/nodemon",target:"_blank",rel:"noopener noreferrer"},U=(0,t.uE)('<p><code>$ npm i -g nodemon</code></p><p>这个库是专门调试时候使用的，它会自动检测 node.js 代码的改动，然后帮你自动重启应用。在调试时可以完全用 nodemon 命令代替 node 命令。</p><p><code>$ nodemon app.js</code> 启动我们的应用试试，然后随便改两行代码，就可以看到 nodemon 帮我们重启应用了。</p><p>那么 app 写完了，接着开始测试，测试代码在 test/app.test.js。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> app <span class="token keyword">from</span> <span class="token string">&#39;../app&#39;</span>\n<span class="token keyword">import</span> supertest <span class="token keyword">from</span> <span class="token string">&#39;supertest&#39;</span>\n<span class="token comment">// 看下面这句，这是关键一句。得到的 request 对象可以直接按照</span>\n<span class="token comment">// superagent 的 API 进行调用</span>\n<span class="token keyword">let</span> request <span class="token operator">=</span> <span class="token function">supertest</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">import</span> should <span class="token keyword">from</span> <span class="token string">&#39;should&#39;</span>\n\n<span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">&#39;test/app.test.js&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 我们的第一个测试用例，好好理解一下</span>\n  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;should return 55 when n is 10&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">done</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 之所以这个测试的 function 要接受一个 done 函数，是因为我们的测试内容</span>\n    <span class="token comment">// 涉及了异步调用，而 mocha 是无法感知异步调用完成的。所以我们主动接受它提供</span>\n    <span class="token comment">// 的 done 函数，在测试完毕时，自行调用一下，以示结束。</span>\n    <span class="token comment">// mocha 可以感知到我们的测试函数是否接受 done 参数。js 中，function</span>\n    <span class="token comment">// 对象是有长度的，它的长度由它的参数数量决定</span>\n    <span class="token comment">// (function (a, b, c, d) {}).length === 4</span>\n    <span class="token comment">// 所以 mocha 通过我们测试函数的长度就可以确定我们是否是异步测试。</span>\n\n    request<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/fib&#39;</span><span class="token punctuation">)</span>\n    <span class="token comment">// .query 方法用来传 querystring，.send 方法用来传 body。</span>\n    <span class="token comment">// 它们都可以传 Object 对象进去。</span>\n    <span class="token comment">// 在这里，我们等于访问的是 /fib?n=10</span>\n      <span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">n</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 由于 http 返回的是 String，所以我要传入 &#39;55&#39;。</span>\n        res<span class="token punctuation">.</span>text<span class="token punctuation">.</span>should<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span><span class="token string">&#39;55&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// done(err) 这种用法写起来很鸡肋，是因为偷懒不想测 err 的值</span>\n        <span class="token comment">// 如果勤快点，这里应该写成</span>\n        <span class="token comment">/*\n        should.not.exist(err);\n        res.text.should.equal(&#39;55&#39;);\n        */</span>\n        <span class="token function">done</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// 下面我们对于各种边界条件都进行测试，由于它们的代码雷同，</span>\n  <span class="token comment">// 所以我抽象出来了一个 testFib 方法。</span>\n  <span class="token keyword">let</span> <span class="token function-variable function">testFib</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">n<span class="token punctuation">,</span> statusCode<span class="token punctuation">,</span> expect<span class="token punctuation">,</span> done</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    request<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/fib&#39;</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">n</span><span class="token operator">:</span> n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span>statusCode<span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        res<span class="token punctuation">.</span>text<span class="token punctuation">.</span>should<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>expect<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">done</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;should return 0 when n === 0&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">done</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">testFib</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">&#39;0&#39;</span><span class="token punctuation">,</span> done<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;should equal 1 when n === 1&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">done</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">testFib</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span> done<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;should equal 55 when n === 10&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">done</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">testFib</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">&#39;55&#39;</span><span class="token punctuation">,</span> done<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;should throw when n &gt; 10&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">done</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">testFib</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token string">&#39;n should &lt;= 10&#39;</span><span class="token punctuation">,</span> done<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;should throw when n &lt; 0&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">done</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">testFib</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token string">&#39;n should &gt;= 0&#39;</span><span class="token punctuation">,</span> done<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;should throw when n isnt Number&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">done</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">testFib</span><span class="token punctuation">(</span><span class="token string">&#39;good&#39;</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token string">&#39;n should be a Number&#39;</span><span class="token punctuation">,</span> done<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// 单独测试一下返回码 500</span>\n  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">&#39;should status 500 when error&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">done</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    request<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/fib&#39;</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">n</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">done</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>完。</p><h2 id="关于-cookie-持久化" tabindex="-1"><a class="header-anchor" href="#关于-cookie-持久化" aria-hidden="true">#</a> 关于 cookie 持久化</h2><p>有两种思路</p><ol><li><p>在 supertest 中，可以通过 <code>let agent = supertest.agent(app)</code> 获取一个 agent 对象，这个对象的 API 跟直接在 superagent 上调用各种方法是一样的。agent 对象在被多次调用 <code>get</code> 和 <code>post</code> 之后，可以一路把 cookie 都保存下来。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> supertest <span class="token keyword">from</span> <span class="token string">&#39;supertest&#39;</span>\n<span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> agent <span class="token operator">=</span> supertest<span class="token punctuation">.</span><span class="token function">agent</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nagent<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&#39;login&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// then ..</span>\nagent<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&#39;create_topic&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 此时的 agent 中有用户登陆后的 cookie</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>在发起请求时，调用 <code>.set(&#39;Cookie&#39;, &#39;a cookie string&#39;)</code> 这样的方式。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> supertest <span class="token keyword">from</span> <span class="token string">&#39;supertest&#39;</span>\n<span class="token keyword">let</span> userCookie<span class="token punctuation">;</span>\nsupertest<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&#39;login&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    userCookie <span class="token operator">=</span> res<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">&#39;set-cookie&#39;</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// then ..</span>\n\nsupertest<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&#39;create_topic&#39;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;cookie&#39;</span><span class="token punctuation">,</span> userCookie<span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol>',9),N={href:"https://github.com/tj/supertest/issues/46",target:"_blank",rel:"noopener noreferrer"},C=(0,t._)("h2",{id:"拓展学习",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#拓展学习","aria-hidden":"true"},"#"),(0,t.Uk)(" 拓展学习")],-1),F=(0,t._)("p",null,"Nodeclub 里面的测试使用的技术跟前面介绍的是一样的，should mocha supertest 那套，应该是很容易看懂的:",-1),W={href:"https://github.com/cnodejs/nodeclub/blob/master/test/controllers/topic.test.js",target:"_blank",rel:"noopener noreferrer"},E={},P=(0,a(8580).Z)(E,[["render",function(n,s){const a=(0,t.up)("ExternalLinkIcon");return(0,t.wg)(),(0,t.iD)("div",null,[p,e,o,(0,t._)("p",null,[(0,t.Uk)("app.js: 其中有个 fibonacci 接口。fibonacci 的介绍见："),(0,t._)("a",c,[(0,t.Uk)("http://en.wikipedia.org/wiki/Fibonacci_number"),(0,t.Wm)(a)]),(0,t.Uk)(" 。")]),i,(0,t._)("ol",null,[(0,t._)("li",null,[(0,t.Uk)("学习 supertest 的使用 ("),(0,t._)("a",l,[(0,t.Uk)("https://github.com/tj/supertest"),(0,t.Wm)(a)]),(0,t.Uk)(" )")]),u]),r,k,d,(0,t._)("p",null,[(0,t.Uk)("噢，对了，说到 fibonacci，Node 中文圈的大神 @苏千("),(0,t._)("a",m,[(0,t.Uk)("https://github.com/fengmk2"),(0,t.Wm)(a)]),(0,t.Uk)(" ) 写过一个页面，对各种语言的 fibonacci 效率进行了测试："),(0,t._)("a",v,[(0,t.Uk)("http://fengmk2.cnpmjs.org/blog/2011/fibonacci/nodejs-python-php-ruby-lua.html"),(0,t.Wm)(a)]),(0,t.Uk)(" 。其中，Node 的表现不知道比 Python 和 Ruby 高到哪里去了，与 CPU 谈笑风生。怀疑 js 的人啊，都 too simple，sometimes naive。")]),(0,t._)("p",null,[(0,t.Uk)("先来介绍一下 supertest。supertest 是 superagent 的孪生库。他的作者叫 tj，这是个在 Node.js 的历史上会永远被记住的名字，因为他一个人撑起了 npm 的半边天。别误会成他是 npm 的开发者，他的贡献是在 Node.js 的方方面面都贡献了非常高质量和口碑的库，比如 mocha 是他的，superagent 是他的，express 是他的，should 也是他的，还有其他很多很多，比如 koa，都是他的。如果你更详细点了解一些 Node 圈内的八卦，一定也会像我一样对 tj 佩服得五体投地。他的 github 首页是："),(0,t._)("a",b,[(0,t.Uk)("https://github.com/tj"),(0,t.Wm)(a)]),(0,t.Uk)(" 。")]),(0,t._)("p",null,[(0,t.Uk)("假使你作为一个有志之士，想要以他为榜样，跟随他前进的步伐，那么我指条明路给你，不收费的："),(0,t._)("a",h,[(0,t.Uk)("http://tour.golang.org/"),(0,t.Wm)(a)])]),g,(0,t._)("p",null,[(0,t.Uk)("假使你有一个 app: "),f,(0,t.Uk)("，想对它的 get 啊，post 接口啊之类的进行测试，那么只要把它传给 supertest："),y,(0,t.Uk)("。之后调用 "),w,(0,t.Uk)(" 时，就可以对 app 的 path 路径进行访问了。它的 API 参照 superagent 的来就好了："),(0,t._)("a",_,[(0,t.Uk)("http://visionmedia.github.io/superagent/"),(0,t.Wm)(a)]),(0,t.Uk)(" 。")]),j,(0,t._)("p",null,[(0,t.Uk)("对了，大家去装个 "),q,(0,t.Uk)(),(0,t._)("a",x,[(0,t.Uk)("https://github.com/remy/nodemon"),(0,t.Wm)(a)]),(0,t.Uk)(" 。")]),U,(0,t._)("p",null,[(0,t.Uk)("这里有个相关讨论："),(0,t._)("a",N,[(0,t.Uk)("https://github.com/tj/supertest/issues/46"),(0,t.Wm)(a)])]),C,F,(0,t._)("p",null,[(0,t._)("a",W,[(0,t.Uk)("https://github.com/cnodejs/nodeclub/blob/master/test/controllers/topic.test.js"),(0,t.Wm)(a)])])])}]])},8580:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,t]of s)a[n]=t;return a}}}]);