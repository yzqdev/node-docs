"use strict";(self.webpackChunknode_docs=self.webpackChunknode_docs||[]).push([[710],{9502:(e,o,a)=>{a.r(o),a.d(o,{data:()=>n});const n=JSON.parse('{"key":"v-3e79a9ce","path":"/node-lessons/lesson13.html","title":"13.线上部署：heroku","lang":"zh-CN","frontmatter":{"order":13,"description":"知识点 1. 学习 heroku 的线上部署( ) 课程内容 什么是 heroku heroku 是弄 ruby 的 paas 起家，现在支持多种语言环境，更甚的是它强大的 add-on 服务。 paas 平台相信大家都不陌生。Google 有 gae，国内新浪有 sae。paas 平台相对 vps 来说，不需要你配置服务器，不需要装数据库，也不需要理...","head":[["meta",{"property":"og:url","content":"https://yzqdev.github.io/node-docs/node-docs/node-lessons/lesson13.html"}],["meta",{"property":"og:site_name","content":"node-docs"}],["meta",{"property":"og:title","content":"13.线上部署：heroku"}],["meta",{"property":"og:description","content":"知识点 1. 学习 heroku 的线上部署( ) 课程内容 什么是 heroku heroku 是弄 ruby 的 paas 起家，现在支持多种语言环境，更甚的是它强大的 add-on 服务。 paas 平台相信大家都不陌生。Google 有 gae，国内新浪有 sae。paas 平台相对 vps 来说，不需要你配置服务器，不需要装数据库，也不需要理..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-03-26T15:48:25.000Z"}],["meta",{"property":"article:modified_time","content":"2022-03-26T15:48:25.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"13.线上部署：heroku\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2022-03-26T15:48:25.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"知识点","slug":"知识点","link":"#知识点","children":[]},{"level":2,"title":"课程内容","slug":"课程内容","link":"#课程内容","children":[{"level":3,"title":"什么是 heroku","slug":"什么是-heroku","link":"#什么是-heroku","children":[]}]}],"git":{"createdTime":1648309705000,"updatedTime":1648309705000,"contributors":[{"name":"yzqdev","email":"yzqdev@outlook.com","commits":1}]},"readingTime":{"minutes":5.19,"words":1557},"filePathRelative":"node-lessons/lesson13.md","localizedDate":"2022年3月26日","autoDesc":true,"excerpt":""}')},4485:(e,o,a)=>{a.r(o),a.d(o,{default:()=>T});var n=a(6808);const t=(0,n._)("h1",{id:"_13-线上部署-heroku",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#_13-线上部署-heroku","aria-hidden":"true"},"#"),(0,n.Uk)(" 13.线上部署：heroku")],-1),s=(0,n._)("h2",{id:"知识点",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#知识点","aria-hidden":"true"},"#"),(0,n.Uk)(" 知识点")],-1),r={href:"https://www.heroku.com/",target:"_blank",rel:"noopener noreferrer"},p=(0,n._)("h2",{id:"课程内容",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#课程内容","aria-hidden":"true"},"#"),(0,n.Uk)(" 课程内容")],-1),l=(0,n._)("h3",{id:"什么是-heroku",tabindex:"-1"},[(0,n._)("a",{class:"header-anchor",href:"#什么是-heroku","aria-hidden":"true"},"#"),(0,n.Uk)(" 什么是 heroku")],-1),c=(0,n._)("p",null,"heroku 是弄 ruby 的 paas 起家，现在支持多种语言环境，更甚的是它强大的 add-on 服务。",-1),d=(0,n._)("p",null,"paas 平台相信大家都不陌生。Google 有 gae，国内新浪有 sae。paas 平台相对 vps 来说，不需要你配置服务器，不需要装数据库，也不需要理会负载均衡。这一切都可以在平台上直接获取。",-1),u=(0,n._)("p",null,"你只要专注自己的业务，把应用的逻辑写好，然后发布上去，应用自然就上线了。数据库方面，如果你用 mysql，那么你可以从平台商那里得到一个 mysql 的地址、账号和密码，直接连接就能用。如果应用的流量增大，需要横向拓展，则只用去到 paas 平台的管理页面，增大服务器实例的数量即可，负载均衡会自动帮你完成。",-1),i={href:"https://code.google.com/p/gappproxy/",target:"_blank",rel:"noopener noreferrer"},h={href:"https://github.com/alsotang/keepagent",target:"_blank",rel:"noopener noreferrer"},k=(0,n._)("p",null,"heroku 的免费额度还是足够的，对于 demo 应用来说，放上去是绰绰有余的。各位搞 web 开发的大学生朋友，一定要试着让你开发的项目尽可能早地去线上跑，这样你的项目可以被其他人看到，能够促使你更有热情地进行进一步开发。这回我们放的是 cnode 社区的爬虫上去，你其实可以试着为你们学院或者学校的新闻站点写个爬虫，提供 json api，然后去申请个微信公共平台，每天推送学院网站的新闻。这东西辅导员是有需求的，可以做个给他们用。",-1),g={href:"https://github.com/Ricardo-Li/node-practice-2",target:"_blank",rel:"noopener noreferrer"},m={href:"https://github.com/alsotang/node-lessons/tree/master/lesson3",target:"_blank",rel:"noopener noreferrer"},b=(0,n.uE)('<p><img src="https://github.com/alsotang/node-lessons/blob/master/lesson12/1.png" alt=""></p><p>clone 下来以后，我们去看看代码。代码中有两个特殊的地方，</p><p>一个是一个叫 Procfile 的文件，内容是：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">web</span><span class="token operator">:</span> node app<span class="token punctuation">.</span>js\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>一个是 app.js 里面，</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">PORT</span> <span class="token operator">||</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这两者都是为了部署 heroku 所做的。</p><p>大家有没有想过，当部署一个应用上 paas 平台以后，paas 要为我们干些什么？</p><p>首先，平台要有我们语言的运行时；</p><p>然后，对于 node.js 来说，它要帮我们安装 package.json 里面的依赖；</p><p>然后呢？然后需要启动我们的项目；</p><p>然后把外界的流量导入我们的项目，让我们的项目提供服务。</p><p>上面那两处特殊的地方，一个是启动项目的，一个是导流量的。</p><p>heroku 虽然能推测出你的应用是 node.js 应用，但它不懂你的主程序是哪个，所以我们提供了 Procfile 来指导它启动我们的程序。</p><p>而我们的程序，本来是监听 5000 端口的，但是 heroku 并不知道。当然，你也可以在 Procfile 中告诉 heroku，可如果大家都监听 5000 端口，这时候不就有冲突了吗？所以这个地方，heroku 使用了主动的策略，主动提供一个环境变量 <code>process.env.PORT</code> 来供我们监听。</p><p>这样的话，一个简单 app 的配置就完成了。</p>',16),_={href:"https://www.heroku.com/",target:"_blank",rel:"noopener noreferrer"},f={href:"https://toolbelt.heroku.com/",target:"_blank",rel:"noopener noreferrer"},v=(0,n._)("code",null,"heroku login",-1),y=(0,n.uE)('<p>上述步骤完成后，我们进入 <code>node-practice-2</code> 的目录，执行 <code>heroku create</code>。这时候，heroku 会为我们随机取一个应用名字，并提供一个 git 仓库给我们。</p><p><img src="https://github.com/alsotang/node-lessons/blob/master/lesson12/2.png" alt=""></p><p>接着，往 heroku 这个远端地址推送我们的 master 分支：</p><p><img src="https://github.com/alsotang/node-lessons/blob/master/lesson12/3.png" alt=""></p><p>heroku 会自动检测出我们是 node.js 程序，并安装依赖，然后按照 Procfile 进行启动。</p><p>push 完成后，在命令键入 <code>heroku open</code>，则 heroku 会自动打开浏览器带我们去到相应的网址：</p><p><img src="https://github.com/alsotang/node-lessons/blob/master/lesson12/4.png" alt=""></p><p>到此课程也就结束了。</p><p>随便聊聊 heroku 的 addon 吧。这个 addon 确实是个神奇的东西，反正在 heroku 之外我还没怎么见到这类概念。这些 addon 提供商，有些提供 redis 的服务，有些提供 mongodb，有些提供 mysql。你可以直接在 heroku 上面进行购买，然后 heroku 就会提供一段相应服务的地址和账号密码给你用来连接。</p>',9),U={href:"https://addons.heroku.com/",target:"_blank",rel:"noopener noreferrer"},w=(0,n._)("p",null,"国内的话，其实在阿里云上面也可以考虑这么搞一搞。",-1),j=(0,n._)("p",null,"完。",-1),x={},T=(0,a(8580).Z)(x,[["render",function(e,o){const a=(0,n.up)("ExternalLinkIcon");return(0,n.wg)(),(0,n.iD)("div",null,[t,s,(0,n._)("ol",null,[(0,n._)("li",null,[(0,n.Uk)("学习 heroku 的线上部署("),(0,n._)("a",r,[(0,n.Uk)("https://www.heroku.com/"),(0,n.Wm)(a)]),(0,n.Uk)(" )")])]),p,l,c,d,u,(0,n._)("p",null,[(0,n.Uk)("说起来，我之所以对于 web 开发产生兴趣也是因为当年 gae 的关系。那时候除了 gae 之外，没有别的 paas 平台，gae 是横空出世的。有款翻墙的软件，叫 gappproxy("),(0,n._)("a",i,[(0,n.Uk)("https://code.google.com/p/gappproxy/"),(0,n.Wm)(a)]),(0,n.Uk)(" )——可以认为是 goagent 的前身——就是搭建在 gae 上面的，不仅快，而且免费。于是我就很想弄懂这样一个程序是如何开发的。好在 gappproxy 是开源的，于是我下了源码来看，那时候才大一，只学过 c，看到那些 python 代码就凌乱了。于是转头也去学 python，后来渐渐发现了 web 开发的乐趣，于是 ruby 和 node.js 也碰碰。后来 goagent 火起来了，我又去看了看它的代码，发现非常难看，就自己写了个 "),(0,n._)("a",h,[(0,n.Uk)("https://github.com/alsotang/keepagent"),(0,n.Wm)(a)]),(0,n.Uk)(" 。不过现在回想起来，还是 goagent 的实现比较稳定以及效率高。")]),k,(0,n._)("p",null,[(0,n.Uk)("好了，我们先 clone "),(0,n._)("a",g,[(0,n.Uk)("https://github.com/Ricardo-Li/node-practice-2"),(0,n.Wm)(a)]),(0,n.Uk)(" 这个项目。由于我们这回讲部署，所以代码就用现成的了，代码的内容就是 lesson 3（"),(0,n._)("a",m,[(0,n.Uk)("https://github.com/alsotang/node-lessons/tree/master/lesson3"),(0,n.Wm)(a)]),(0,n.Uk)(" ） 里面的那个爬虫。")]),b,(0,n._)("p",null,[(0,n.Uk)("我们去 "),(0,n._)("a",_,[(0,n.Uk)("https://www.heroku.com/"),(0,n.Wm)(a)]),(0,n.Uk)(" 申请个账号，然后下载它的工具包 "),(0,n._)("a",f,[(0,n.Uk)("https://toolbelt.heroku.com/"),(0,n.Wm)(a)]),(0,n.Uk)(" ，然后再在命令行里面，通过 "),v,(0,n.Uk)(" 来登录。")]),y,(0,n._)("p",null,[(0,n.Uk)("大家可以去 "),(0,n._)("a",U,[(0,n.Uk)("https://addons.heroku.com/"),(0,n.Wm)(a)]),(0,n.Uk)(" 这个页面看看，玲琅满目各种应用可以方便接入。之所以这类服务有市场，也是因为亚马逊的 aws 非常牛逼。为什么这么说呢，因为网络速度啊。如果现在在国内，你在 ucloud 买个主机，然后用个阿里云的 rds，那么应用的响应速度会因为 mysql 连接的问题卡得动不了。但在 heroku 这里，提供商们，包括 heroku 自己，都是构建在 aws 上面，这样一来，各种服务的互通其实走的是内网，速度很可以接受，于是各种 addon 提供商就做起来了。")]),w,j])}]])},8580:(e,o)=>{o.Z=(e,o)=>{const a=e.__vccOpts||e;for(const[e,n]of o)a[e]=n;return a}}}]);