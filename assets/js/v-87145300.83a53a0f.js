"use strict";(self.webpackChunknode_docs=self.webpackChunknode_docs||[]).push([[8863],{4477:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t=JSON.parse('{"key":"v-87145300","path":"/node-snippets/path-notice.html","title":"路径的问题","lang":"zh-CN","frontmatter":{"description":"path模块的引入 path.join() 使用平台特定的分隔符（window：/）作为定界符,将所有给定的path片段连接在一起,然后规范化生成的路径 path.resolve() 将路径或者路径片段序列化为绝对路径 为了要获取到符合 / 格式的路径，我们可以使用 PATH 模块提供的 path.sep 接口 (https://nodejs.org/...","head":[["meta",{"property":"og:url","content":"https://yzqdev.github.io/node-docs/node-docs/node-snippets/path-notice.html"}],["meta",{"property":"og:site_name","content":"node-docs"}],["meta",{"property":"og:title","content":"路径的问题"}],["meta",{"property":"og:description","content":"path模块的引入 path.join() 使用平台特定的分隔符（window：/）作为定界符,将所有给定的path片段连接在一起,然后规范化生成的路径 path.resolve() 将路径或者路径片段序列化为绝对路径 为了要获取到符合 / 格式的路径，我们可以使用 PATH 模块提供的 path.sep 接口 (https://nodejs.org/..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-03-26T15:48:25.000Z"}],["meta",{"property":"article:modified_time","content":"2022-03-26T15:48:25.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"路径的问题\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2022-03-26T15:48:25.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"path模块的引入","slug":"path模块的引入","link":"#path模块的引入","children":[]},{"level":2,"title":"path.join()","slug":"path-join","link":"#path-join","children":[]},{"level":2,"title":"path.resolve()","slug":"path-resolve","link":"#path-resolve","children":[]}],"git":{"createdTime":1648309705000,"updatedTime":1648309705000,"contributors":[{"name":"yzqdev","email":"yzqdev@outlook.com","commits":1}]},"readingTime":{"minutes":1.27,"words":380},"filePathRelative":"node-snippets/path-notice.md","localizedDate":"2022年3月26日","autoDesc":true,"excerpt":""}')},4660:(n,s,a)=>{a.r(s),a.d(s,{default:()=>u});var t=a(6808);const e=(0,t.uE)('<h1 id="路径的问题" tabindex="-1"><a class="header-anchor" href="#路径的问题" aria-hidden="true">#</a> 路径的问题</h1><h2 id="path模块的引入" tabindex="-1"><a class="header-anchor" href="#path模块的引入" aria-hidden="true">#</a> path模块的引入</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> path <span class="token keyword">from</span> <span class="token string">&#39;path&#39;</span><span class="token comment">// 直接引用node中自带的模块</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="path-join" tabindex="-1"><a class="header-anchor" href="#path-join" aria-hidden="true">#</a> path.join()</h2><p>使用平台特定的分隔符（window：/）作为定界符,将所有给定的path片段连接在一起,然后规范化生成的路径</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">)</span>   <span class="token comment">// 输出结果为： &#39;/a/b/c&#39;</span>\npath<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;/b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">)</span>  <span class="token comment">// 输出结果为： &#39;/a/b/c&#39;</span>\npath<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;a/b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;../&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 输出结果为： &#39;/a/c&#39;</span>\npath<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;./&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 输出结果为：&#39;/a/c&#39;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="path-resolve" tabindex="-1"><a class="header-anchor" href="#path-resolve" aria-hidden="true">#</a> path.resolve()</h2><p>将路径或者路径片段序列化为绝对路径</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 假设当前绝对路径为/admin/user</span>\npath<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 输出结果为：&#39;/admin/user/a/a/c&#39;</span>\npath<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;/b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 输出结果为： &#39;/b/c&#39;</span>\npath<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;a/b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;../&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 输出结果为：&#39;/admin/user/a/c&#39;</span>\npath<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;./&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 输出结果为：&#39;admin/user/a/c&#39;</span>\n注意<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/</span><span class="token template-punctuation string">`</span></span>的存在<span class="token punctuation">,</span> <span class="token string">&#39;/a&#39;</span>代表的是根目录下的a<span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span>代表的是当前目录下的a\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',9),p=(0,t._)("code",null,"/",-1),o=(0,t._)("code",null,"PATH",-1),c=(0,t._)("code",null,"path.sep",-1),i={href:"https://nodejs.org/dist/latest-v12.x/docs/api/path.html#path_path_sep",target:"_blank",rel:"noopener noreferrer"},l=(0,t.uE)('<p>在 Unix 系统下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>foo<span class="token operator">/</span>bar<span class="token operator">/</span>baz&#39;<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span>sep<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// Returns: [&#39;foo&#39;, &#39;bar&#39;, &#39;baz&#39;]</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Windows 系统下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>foo\\\\bar\\\\baz&#39;<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span>sep<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// Returns: [&#39;foo&#39;, &#39;bar&#39;, &#39;baz&#39;]</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>path.sep</code> 的赋值也是根据操作系统来决定是 <code>/</code> 还是 `\\</p><p>最终的方案自然是 <code>string.split(path.sep).join(&#39;/&#39;)</code> 来进行分隔符的替换。</p>',6),r={},u=(0,a(8580).Z)(r,[["render",function(n,s){const a=(0,t.up)("ExternalLinkIcon");return(0,t.wg)(),(0,t.iD)("div",null,[e,(0,t._)("p",null,[(0,t.Uk)("为了要获取到符合 "),p,(0,t.Uk)(" 格式的路径，我们可以使用 "),o,(0,t.Uk)(" 模块提供的 "),c,(0,t.Uk)(),(0,t._)("a",i,[(0,t.Uk)("接口"),(0,t.Wm)(a)]),(0,t.Uk)("进行字符串匹配截取，接口会根据系统环境的不同进行匹配截取。")]),l])}]])},8580:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,t]of s)a[n]=t;return a}}}]);